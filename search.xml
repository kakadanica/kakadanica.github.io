<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[创建以及编译一个vue项目的步骤]]></title>
    <url>%2F2018%2F09%2F29%2F%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[下载配置npm 前往node.js官网下载并安装工具，这里安装路径选到D盘，D:\Program Files\nodejs 安装完毕在命令行输入以下命令测试是否安装成功，正确会出现版本号1npm -v 改变原有的环境变量 (1) 我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立”node_global”及”node_cache”两个文件夹，输入以下命令改变npm配置 12npm config set prefix "D:\Program Files\nodejs\node_global"npm config set cache "D:\Program Files\nodejs\node_cache" (2) 在系统环境变量添加系统变量NODE_PATH，输入路径D:\Program Files\nodejs\node_global\node_modules，此后所安装的模块都会安装到改路径下 (3) 在命令行输入以下命令试着安装express（注：“-g”这个参数意思是装到global目录下，也就是上面说设置的“D:\Program Files\nodejs\node_global”里面。） 1npm install express -g 安装完毕后可以看到.\node_global\node_modules\express 已经有内容 (4) 在命令行输入node进入编辑模式，输入以下代码测试是否能正常加载模块： 1require('express') 假设成功，可以看到有输出。假设出错，检查NODE_PATH的路径。 安装淘宝npm（cnpm） 输入以下命令 1npm install -g cnpm --registry=https://registry.npm.taobao.org 输入cnpm -v输入是否正常，这里肯定会出错。 1cnpm -v 添加系统变量path的内容 因为cnpm会被安装到D:\Program Files\nodejs\node_global下，而系统变量path并未包含该路径。在系统变量path下添加该路径即可正常使用cnpm。 搭建Vue项目 全局安装 vue-cli 1cnpm install –global vue-cli 创建一个基于 webpack 模板的新项目 12vue init webpack my-projectcd my-project 安装依赖 123456cnpm install jquery --save-devcnpm install jquery-weui --save-dev #移动端UI框架，依赖jquerycnpm install axios --save-dev #异步请求cnpm install fontawesome --save-dev #图标样式库... (mockjs(前后端分离，待研究)，iview,element-ui(web端框架)) 项目目录规划 12345678910111213141516assets img js cssaxios $http,js 封装get/post等http请求components 公共组件目录 ...pages 系统各模板页面 ...router index.js 路由app.vuemain.js 主入口文件dist webpack 打包文件目录 项目运行和项目编译 12cnpm run devcnpm run build]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年上半年工作总结]]></title>
    <url>%2F2018%2F07%2F18%2F2018%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[工作成果应急救援管理系统该系统虽然最终以暂停开发作为结局，但它仍然是上半年工作中的一个重要角色，收获和感受颇多。 收获 1. 在精短的时间区间内，考研了项目框架的易用性，改造的最大可能性，考验了团队凝聚力。 年初公司启动了基于公司产品风格的配色方案，令人惊喜的是，项目框架能有效的随着配色方案的改变快速做出响应，一再证明了hplus框架选择的正确性，虽然他基于（jquery+freemarker+layui）相对于市场来说是比较的old，但也无法否定他是公司前端部门技术发展道路上的一个重要的战略性的部署。开年过后，团队进入了紧密锣鼓的应急救援项目迭代开发时期，面对不断变化的需求，不断调整的开发方案，和公司需要盈利的各种压力，前端小组以良好的心态承接了一切。 2. 地图开发，图文操作交互技术的惊艳呈现 相比于传统的图文表单列表的后台管理系统的需求，应急救援项目具有更鲜明的科技性，针对地图做出相应的战略部署，实时应急救援信息的上传下达，项目开始的时候我对做到什么程度并没有任何把握，只是面对这样有意思的需求，觉得是一次有意思的技术挑战，除了对于如何攻克技术难点的思考，也乐于接受更加好的用户体验开发，这部分在记忆中是一次非常享受的开发经历。偶尔在会议上接收到同仁的赞誉，越发的肯定了我对于尽善尽美的追求，生活如是，工作如是。 3. 庞大的需求体系和弱小的人力资源冲突的思考 一度紧张到什么程度呢，觉得和同事多说一句无关紧要的话就是在浪费时间，即使大多数的同仁都在尽力的交互好自己手上的任务，相对的体谅前端小组，但是我还是发了三次火，这个后面再说。但是这个项目让我深刻的意识：重复写代码觉得是在浪费生命。在公司前途不明朗，项目最终需求未确定的情况下，既然无法对人力资源有更多的要求，反观自己本身，有很多需要精简的地方。在这个时候，逐渐萌生出面向对象开发的种子。 感受 1. 有一次和Anson发生了冲突，是一次完全没有必要的冲突，私下也实在抱歉过，再次抱歉^·^这次的冲突让我意识到： 项目的开发过程中有一些思维误区，这个误区不是那么的明显和直白，需要工作阅历的成长，踩过了可能才会知道，我当然是选择原谅自己，但是也更加由衷的服气Anson同学思维的严谨合理性。有一些时候需要充分理解到对方的思想过后才发言，是避免冲突的小tip，另外就是，信任你的partner不是傻瓜，所有的观点都是可听的。 2. 基于公司层面，公司需要的是能干好事，工作习惯良好的人，基于Danica层面，尊重是相处底线 处于社会当中的任何一个位置，大浪淘沙，优胜劣汰是职场的本质（因此我特别感恩就职公司至少表现出来的是一个人情味十足的现象），不合理的现象例如：相同的工作错误屡教不改，不配合或者耽误合作者的工作进程，就比较的令人匪夷所思。而我，作为一名职场女性，接受过九年义务教育，对自己和同仁的基本要求就是相互尊重。综上我表现出来的所有情绪，我充分理解自己^_^ 3. 脾气不要比本事大 智慧商城后台管理系统这个项目的话，目前来看，有条不紊的进行着项目发版运行的阶段，收获和感受如下。 收获 1. 面向对象开发，兼容性开发 深怕自己被时代抛弃的Danica其实暗暗的关心着市场动态，以及有所经历就会有所感悟，知行合一发现面向对象开发之后：思维更加清晰了，bug更好改了，代码更好维护了。在这个项目中，Danica面向对象封装了一些公共组件，并大力倡导Winnie使用这个方式开发，前端代码质量相对之前up至少两个level。兼容性开发会在这里提起，是因为在优化代码的路上使用了一些新特性，而本项目基于exe浏览器出现了之前未出现过的兼容性问题，因为在创新的道路上不要忘记初心，是本项目的指导结果。 2. 很明显的感觉到合作各方更多的专业性 进度把控，项目收验，优化交互，人力资源依旧很紧张，但是大家工作依旧很默契，且劲往一处使。前端方面更加专业性的地方在于：pc端组件化，风格化，交互化的的解决方案积淀得越来越多，直接体现于新需求的快速的高质量的开发。摸清了各方人员的脾性和喜好，在开发过程中最大程度的避免了雷区，使项目后期也比较轻松。 3. 偶然读了Jim的代码，改变了之前很鸡肋的写法 其实我是很赞同很赞同代码review这个plan的，但是每次要review的时候根本真的忙的没时间和精力去搞，但是如果我没有阅读Jim的代码，我到现在都可能还写着那个鸡肋的代码，想想都觉得难受。 感受 并没有体现太多个人的能动性，领导者中央集权会有点累哦，随着团队的扩张，流程化的东西越来越耗时。 微信一号店商城微信公众号网页项目招不到人，小年轻们嫌我们技术栈落后，就很心累。Jim让我封装个移动端框架，没得任何实践，空手套框架，也很心累。所以特别热烈happy的迎接自己进入这个项目的开发周期，虽然距离开始才不到2周，但是我的收获和感受不亚于前两项目 收获 1. 所谓的潮流框架 溜了一圈市场，沟通了一波小年轻，最终定性Vue，经过一周的开发，初步解决了：大的方面：脚手架搭建，发版，集成springboot, 集成微信sdk，集成weui小的方面：页面跳转，页面嵌套，传参，数据请求及解析截止目前为止，第一个迭代任务的页面已经开发完毕，接下来接口集成的思路也很明确，没啥特别艰难的阻碍，因为：a. Vue市场解决方案很成熟b. 也的确好上手c. 我有点聪明O(∩_∩)O哈哈~很喜欢Vue的地方a. 模块隔离及组件化深得我心b. 基于npm控制台操作有点酷炫也希望大家会喜欢 2. Jim的方式 就开了一次会，我已经把他的话记到小本本上了a. jack你要增强设计能力b. Sam你要注意进度把控c. all要重视计划的重要性d. 如果你是管理层，请让自己稍微闲一点，以便于完成管理成员无法解决的问题每一个人都有ta的需求，重视每个人的需求，对症下药，是Jim的方式，是我学习的方式 感受 事情一件一件的fix,莫慌 学习成果 敏捷开发管理准则之一：不要害怕改变，改变是进步最直接的方式。——这一条读到之后Danica面对需求改变都云淡风轻了。 ES6开发实践，面向对象编程 基于JQUERY的元素拖拽的解决方案实 基于CSS3的缩放解决方案实践 NPM+WEBPACK的使用 Python的涉猎 VUE-CLI+JQUERY-WEUI项目实践 VCODE的使用(前端开发超好用编辑器) 自我评价深怕被时代抛弃 未来计划 移动端框架定型 PC端框架改造 致力于提供高效率工作的解决方案 探寻高效率管理的解决方案]]></content>
      <categories>
        <category>life协奏曲</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信公众号网页项目开发，基于VUE技术栈的尝试]]></title>
    <url>%2F2018%2F07%2F13%2F%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E9%A1%B5%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%EF%BC%8C%E5%9F%BA%E4%BA%8EVUE%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9A%84%E5%B0%9D%E8%AF%95%2F</url>
    <content type="text"><![CDATA[前言 天，我的域名终于能正常访问了，一头雾水摸索了半天，在阿里云控制台上左点点右点点，搞了一个免费的证书，OH我的宝贝网站肥来了~ 这几个月公司持续有很多事情去做，加上谈恋爱初期，时间被幸福和忙碌冲刺，少有新的领域涉及，少有时间整理，这一条当然是这几个月缺失博文的借口 其实公司的前端一直在用JQUERY开发，相关的技术栈现在的年轻人听到都觉得“啊！好老”，我悄悄觉得很汗颜，作为公司前端部门负责人，没办法吸引新的血液为公司效力，是我的失败。而在职公司PC端基于jquery已经有比较成熟的体系，改造起来成本比较大，相反移动端的技术框架一直没有怎么定型，所以就先从手机端入手尝试使用所谓的新一点的技术。 有幸进入了【公众号：前端早读课】组织的一个读书群，做了一段时间的话痨，以及基于一些数据的统计，目前市面上流行的前端技术包含Vue,React等，在职的公司是一个稳步发展，小而美的类型，考虑到Vue在国内解决方案更成熟，决定基于Vue选型技术栈 前提在本机上安装配置好npm, vue-cli 技术栈确认vue.js更像是js或者jquery在一个项目中的身份；相继需要确认的是UI框架：我们决定使用jquery-weui，因为本来就是微信公众号的网页项目，而且拿使用者比例数据来说话的话，它也比较突出，所以没咋纠结就确认好了、图标：我们还是决定使用font-awesome文字图标库、页面跳转：vue-router、项目构建：webpack、…(待补充呀)综上，最终确定的技术栈：vue+vue-router+webpack+jquery-weui+fontawesome 项目搭建过程 初始化vue+webpack项目【danica001】在项目文件夹下执行如下命令: 1vue init webpack danica001 创建过程及结果参考如下：我在这个过程中顺便安装了vue-router项目文件夹说明：入口文件夹内容说明：然后按照To get srarted 去运行模板项目： 引入jquery和jquery-weui在package.json里加入依赖：然后在集成终端执行命令： npm install ,进行安装添加webpack静态模块打包器，在build目录下的webpack.base.conf.js里加入： 1var webpack = require("webpack") 在build目录下的webpack.base.conf.js里的module.exports的最后加入： 1234567plugins: [ new webpack.optimize.CommonsChunkPlugin('common.js'), new webpack.ProvidePlugin(&#123; jQuery: "jquery", $: "jquery" &#125;)] 全局使用css：在main.js顶部导入weui样式 1import 'jquery-weui/dist/css/jquery-weui.min.css' 使用js：在需要用到组件文件顶部导入使用，具体使用细节查看weui的文档 123import $ from 'jquery'import weui from 'jquery-weui/dist/js/jquery-weui.min'import picker from 'jquery-weui/dist/js/city-picker.min' 引入font-awesomenpm 安装font-awesome 以及需要的所有依赖: 1npm install less less-loader css-loader style-loader file-loader font-awesome --save-dev 全局使用css：在main.js顶部导入fontawesome样式 1import 'font-awesome/css/font-awesome.min.css' 在html中正常使用即可 技术点思考 路由传参方式html代码： 1&lt;router-link :to="&#123;name:'Index', params:&#123;user:'123'&#125;&#125;"&gt;&lt;a class="back"&gt;&lt;i class="fa fa-times"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/router-link&gt; Index.vue代码： 1234567&lt;script&gt;export default &#123; created() &#123; console.dir(this.$route.params.user) &#125;&#125;;&lt;/script&gt; 全局变量存储创建文件Global.vue 123456789101112131415&lt;script&gt;var userInfo;function setUserInfo(user) &#123; userInfo = user;&#125;function getUserInfo() &#123; return userInfo ? userInfo : '-';&#125;export default &#123; setUserInfo, getUserInfo&#125;&lt;/script&gt; 在main.js中导入并设置全局变量 12import global_ from './components/Global'Vue.prototype.GLOBAL = global_ 在其它组件中使用 12this.GLOBAL.setUserInfo('danica')this.GLOBAL.getUserInfo() =&gt; danica 结语内容待丰富]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
        <tag>Jquery</tag>
        <tag>Jquery-weui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一篇文章搞定在vscode中运行springboot项目]]></title>
    <url>%2F2018%2F07%2F03%2F%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%E5%9C%A8vscode%E4%B8%AD%E8%BF%90%E8%A1%8Cspringboot%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[前言网络上有很多在vscode中配置java开发环境的文章，我看了很多，并没有解决到我的问题然后有人不停的阻止我去研究这个问题哎呀你用idea写java好不好？太不专业了啦emm….我个人一下子vscode吸引的原因是：它让我感受到了搭积木的乐趣，you use you need，就很nice，而且特别轻量，界面又简单，打开速度也很快（also是我喜欢sublime Text的原因）而且 既然vscode人家都支持java环境配置了，我怎么就配置用一下就变成不专业了呢还是那句话：存在即合理~我学不会放弃~这篇文章很有目的性，我的需求是：如何在windows版本的vscode中运行一个基于maven的springboot项目？我将会在这篇文章中一步步展示我为之付出的努力。 前提安装jdk，maven，及配置好相应的环境变量 下载去 https://code.visualstudio.com/Download 这个地址下载适合你电脑的vscode安装包，运行安装即可 设置编辑器语言毕竟是新的工具，它又具备显示成你母语的功能，就设置一下吧，能更快上手。编辑器语言初始是英文then快捷键ctrl+shift+p或者view在输入框输入language， 点击下方关联提示的Configure Display Language项，界面会打开locale.json文件修改文件中的配置项【locale】(英文：en, 中文：zh-CN, 其它语言自己百度)重新打开编辑器即可 安装扩展截止目前为止我安装了10个扩展,我按照重要程度如下排序：Language Support for Java(TM) by Red HatJava Extension PackDebugger for JavaJava Test RunnerMaven for JavaSpring Boot SupportSpring Initializr Java SupportCheckstyle for JavaEclipse KeymapGit Project Manager 用户设置点击【文件】-&gt;【首选项】-&gt;【设置】打开User Settings文件搜索“java.home”,点击在设置中替换，配置本机jdk的安装路径搜索“maven”, 找到“maven.executable.path”项，配置maven命令工具的文件路径搜索“maven”, 找到“java.configuration.maven.userSettings”项，配置maven加载配置文件（settings.xml）的所在路径如下： 打开项目ctrl+o或者【文件】-&gt;【打开文件夹】，将你的项目导入vscode完了之后vscode会根据你的项目推荐你安装扩展，你点OK即可 maven编译【查看】-&gt;【打开视图】-&gt;【终端】，键入maven编译命令：mvn clean compile -U，回车出现如下结果1234567[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 7.932 s[INFO] Finished at: 2018-07-04T09:38:25+08:00[INFO] Final Memory: 46M/300M[INFO] ------------------------------------------------------------------------表示maven配置生效这个时候你找到项目文件夹里的pom.xml, 试一下右键【Update Project Configration】, 这个是当你修改了用户设置，使项目及时更新配置的方法 运行项目ctrl+shift+d,进入调试模式，添加调试相关配置如下配置完成之后，点击左上角绿色启动按钮，观察调试控制台的输出，没报错说明你的springboot项目运行成功了！ 总结要特别注意maven的配置和如何进入调试模式。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6 Module在项目中的用法研究]]></title>
    <url>%2F2018%2F04%2F04%2FES6-Module%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E7%94%A8%E6%B3%95%E7%A0%94%E7%A9%B6%2F</url>
    <content type="text"><![CDATA[前置条件3月份我和一位做技术的朋友聊天。这人不修边幅，油腻腻的，典型的程序员形象。但是就这样一个人，从他喉咙里出来的每个技术名词，都将我KO得无地自容。回忆一段对话如下：-你知道ES6吗？-我知道。-你用的多吗？-现在的项目里在用（内心：其实就用了箭头函数）…-那你知道babel吗？-…那是什么？接着对方使用了unbelievable? excuse me? WTF?等词汇的肢体语言回复了我这个问题，I see 我们对于彼此此刻的judge已经成型了。 回到办公室，搜索了一下babel，是一个超级简单0难度的工具，人生啊，很少机会给你碰到死在一个庞然大物的践踏下，死在星球毁灭人类灭亡的历史中…我的这种死法，太不壮观了，太尴尬了，我死于安逸。 Babel 是一个 JavaScript 编译器。将下一代JavaScript代码转换成浏览器兼容的JavaScript代码。我和我的团队，长久的使用浏览器兼容的JavaScript代码，生活在自己构筑的稳定世界中，是时候伸出头看看这个世界了。 本文的中心之前的文章《使用闭包函数优化思维，重构代码》中，有对es6的箭头函数进行了尝试运用，并已经使用在现在的项目中，加上我也过了一遍前辈阮一峰先生的《ES6标准入门（第三版）》电子版，所以es6的一些使用特性，新增的方法属性那些一定是需要你在使用的过程中进行日积月累，因此本文的中心，我focus到我比较关心的module，这是之前js不具备的功能。 es6 module 概述摘抄一段：历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。我一定要学会的理由：我没有用过学过CommonJS 和 AMD，直接学ES6 Module一次取代两项技能，怎么都觉得自己赚了，嘤嘤嘤。 语法和使用export &amp; importexport命令用于规定模块的对外接口import命令用于输入其它模块提供的功能一个模块（module）就是一个独立的文件，该文件内部的所有变量，外部无法获取，如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。外部文件就得使用import命令加载这个模块的接口 export语法简略 export 命令处于模块文件顶层，不出现在块级作用域内。 export 可输出变量，函数和类 export 可自定义输出的变量或者函数的名字 12345678910111213141516171819202122232425262728293031323334353637// 输出单个变量，把export 关键字放在变量定义之前，如下：export let a = 1;export let b = 2;// 或者如下输出单个变量，语法强调大括号是必须存在的: export的目的是输出接口，必须和模块内的变量建立一一的对应let c = 1;export &#123;c&#125;// 基于上面的语法释义，输出多个变量如下：let d = 1, e = 2;export &#123;d, e&#125;;// 简单吧，输出函数和类的原则同上// 输出单个函数或类export function v1() &#123; ... &#125;export class c1 &#123; ... &#125;// 或者function v2() &#123; ... &#125;class c2 &#123;&#125;export &#123;v2&#125;;export &#123;c2&#125;;// 输出多个函数或类function v3() &#123; ... &#125;function v4() &#123; ... &#125;class c3 &#123; ... &#125;class c4 &#123; ... &#125;export &#123;v3, v4, c3, c4&#125;// 自定义输出命名let f = 'f';function v5() &#123; ... &#125;class c5 &#123;&#125;export &#123; f as varibleF, v5 as functionV5, c5 as classC5&#125; import 语法简略 导入就是导入，记住语法就行了，不要多想乱写，如下import {接口1, 接口2, 接口3, … 接口n} from ‘模块文件路径’ 我并不会再多说其它什么了，睁大眼睛看好记住，这就是import的语法。 小试牛刀1 创建一个小项目如图，项目中包含两个文件a.mjs, b.mjs(mjs后缀，我们这里理解为module javascript)。 2 我们在a.mjs中使用export语法输出接口，代码如下12345678910let name = 'Xiao Nai Miao', describle = 'she has been falling in mad love with a guy';function getGuyInfo() &#123; return &#123; name: 'Xiao Nai Gou', describle: 'sooooooo sweet and charming~' &#125;&#125;export &#123;name, describle, getGuyInfo&#125;; 3 我们在b.mjs中使用import语法接收a模块的输出接口,并且使用这些接口对象1234import &#123;name, describle, getGuyInfo&#125; from './a.mjs';console.info('A girl’s name is ' + name + ', and ' + describle + ' named ' + getGuyInfo().name + ' , because ' + getGuyInfo().name + ' is ' + getGuyInfo().describle); 4 目前我学会的使用方式 1) nodejs 加载首先你的确保你本地的nodejs是最新的版本，使用node -v查看版本号，我的是v9.10.1最新的nodejs版本已经开始支持es6 module, 但是它要求你的module文件后缀名是‘mjs’,因此从一开始创建项目我就遵循了这个规则现在我们在cmd进入创建项目【es6-module】的根目录，键入node运行es6 module 的如下命令：1node --experimental-modules b.mjs因为我们在b.mjs导入了a.mjs的借口，并使用了它的数据，所以我们执行b.mjs文件。 执行结果如下： A girl’s name is Xiao Nai Miao, and she has been falling in mad love with a guy named Xiao Nai Gou , because Xiao Nai Gou is sooooooo sweet and charming~ YES! 看来我们成功了！ 2) es6模块转码之ES6 module transpilerES6 module transpiler是 square 公司开源的一个转码器，可以将 ES6 模块转为 CommonJS 模块或 AMD 模块的写法，从而在浏览器中使用。 首先，在本地安装这个转码器。 $ npm install -g es6-module-transpiler 然后，使用compile-modules convert命令，将 ES6 模块文件转码。-o参数可以指定转码后的文件名。 $ compile-modules convert -o out.js file1.js 现在我们在cmd进入创建项目【es6-module】的根目录，按照上面的转码语法，键入如下命令并且回车： 1compile-modules convert -o index.js b.mjs 这句命令的意思将b.mjs转码成新的文件，它的名字我命名为index.js 没有任何报错信息表示转码成功，这个时候你去看你的项目目录,将会显示转码成功后的index.js。 打开index.js文件，它合并了a.mjs和b.mjs, 变成了我们熟悉的es5的味道。如下：1234567891011121314151617(function() &#123; "use strict"; let $$a$mjs$$name = 'Xiao Nai Miao', $$a$mjs$$describle = 'she has been falling in mad love with a guy'; function $$a$mjs$$getGuyInfo() &#123; return &#123; name: 'Xiao Nai Gou', describle: 'sooooooo sweet and charming~' &#125; &#125; console.info('A girl’s name is ' + $$a$mjs$$name + ', and ' + $$a$mjs$$describle + ' named ' + $$a$mjs$$getGuyInfo().name + ' , because ' + $$a$mjs$$getGuyInfo().name + ' is ' + $$a$mjs$$getGuyInfo().describle);&#125;).call(this);//# sourceMappingURL=index.js.map这个文件可以被任意的浏览器识别和运行，是的，就那么简单！ 未完待续到这里，es6 moudle 算是初步入门了，后面的路且长，愿在实践中获得成长。]]></content>
  </entry>
  <entry>
    <title><![CDATA[百度地图api使用-区域网格管理]]></title>
    <url>%2F2018%2F02%2F28%2F%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi%E4%BD%BF%E7%94%A8-%E5%8C%BA%E5%9F%9F%E7%BD%91%E6%A0%BC%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[说明及效果图在地图上高亮显示成都市的行政区域切换高亮显示行政区域在行政区域添加自定义的中心点以及网格范围 使用技术laytpl, jquery, es6 interesting point 判断一个点是否在一个不规则多边形内，使用射线法 basic js is very useful！ 给对象绑定属性和方法如下：1234BMap.Polygon.prototype.datas = &#123;&#125;;BMap.Polygon.prototype.setDatas = function(datas) &#123; this.datas = datas;&#125;; 面向对象开发，能有效使你脑壳不晕。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;div class="wrapper-content"&gt; &lt;div class="row"&gt; &lt;div class="col-sm-12"&gt; &lt;div class="bdmap-area"&gt; &lt;div class="zoom-operation"&gt; &lt;div class="left-opers"&gt; &lt;a class="fa fa-list toggle-region-grid-list"&gt;&amp;nbsp;网格区域列表&lt;/a&gt; &lt;div class="fold-grid-region-list hide" id="grid-region-distribute-view"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="rgt-opers"&gt; &lt;button class="btn btn-primary add-marker"&gt;添加网格区域&lt;/button&gt; &lt;button class="btn btn-primary save-region-grid hide"&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="container"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="wrapper-content hide" id="grid-region-form"&gt; &lt;div class="row"&gt; &lt;div class="col-sm-12"&gt; &lt;form method="get" class="form-horizontal"&gt; &lt;input type="hidden" name="id"&gt; &lt;input type="hidden" name="regionId"&gt; &lt;div class="form-group"&gt; &lt;label class="col-sm-3 control-label"&gt;网格区域名称&lt;/label&gt; &lt;div class="col-sm-9"&gt; &lt;input class="form-control" placeholder="输入网格区域名称" type="text" name="name" value=""&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label class="col-sm-3 control-label"&gt;负责人&lt;/label&gt; &lt;div class="col-sm-9"&gt; &lt;input class="form-control" placeholder="请选择一个负责人" type="text" name="chargePerson" value=""&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-sm-4 col-sm-offset-3"&gt; &lt;button class="btn btn-primary" type="submit"&gt;去地图上选点&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;$('#container').css('height', ($(window).height() - 140) + 'px');GridRegionUtil.init(&#123; containerId: 'container', gridRegions: JSON.parse('[&#123;"region":&#123;"id":5,"name":"青羊区"&#125;,"relates":[&#123;"id":1,"name":"文家路社区","chargePerson":"李丹","point":&#123;"lng":103.954011,"lat":30.685222&#125;,"gridPoints":[&#123;"lng":103.95601099999999,"lat":30.687222&#125;,&#123;"lng":103.952011,"lat":30.687222&#125;,&#123;"lng":103.952011,"lat":30.683222&#125;,&#123;"lng":103.95601099999999,"lat":30.683222&#125;,&#123;"lng":103.961988,"lat":30.685067&#125;,&#123;"lng":103.95601099999999,"lat":30.687222&#125;]&#125;]&#125;,&#123;"region":&#123;"id":1,"name":"金牛区"&#125;,"relates":[&#123;"id":2,"name":"呵呵哒社区","chargePerson":"李丹","point":&#123;"lng":104.023396,"lat":30.721085&#125;,"gridPoints":[&#123;"lng":104.025396,"lat":30.723084999999998&#125;,&#123;"lng":104.023468,"lat":30.727263&#125;,&#123;"lng":104.02139600000001,"lat":30.723084999999998&#125;,&#123;"lng":104.010999,"lat":30.720992&#125;,&#123;"lng":104.02139600000001,"lat":30.719085&#125;,&#123;"lng":104.024079,"lat":30.710498&#125;,&#123;"lng":104.025396,"lat":30.719085&#125;,&#123;"lng":104.035074,"lat":30.720713&#125;,&#123;"lng":104.025396,"lat":30.723084999999998&#125;]&#125;]&#125;,&#123;"region":&#123;"id":3,"name":"锦江区"&#125;,"relates":[&#123;"id":3,"name":"天啦噜社区","chargePerson":"李丹","point":&#123;"lng":104.093697,"lat":30.65301&#125;,"gridPoints":[&#123;"lng":104.092278,"lat":30.662221&#125;,&#123;"lng":104.079944,"lat":30.658716&#125;,&#123;"lng":104.080402,"lat":30.652233&#125;,&#123;"lng":104.084912,"lat":30.650974&#125;,&#123;"lng":104.09429,"lat":30.646252&#125;,&#123;"lng":104.097434,"lat":30.640768&#125;,&#123;"lng":104.1078,"lat":30.653709&#125;,&#123;"lng":104.09508,"lat":30.658928&#125;,&#123;"lng":104.092278,"lat":30.662221&#125;]&#125;]&#125;]')&#125;)&lt;/script&gt; jslet GridRegionUtil = (function() &#123; let mp = null, opers = null, geoLocation = new BMap.Geolocation(), geoc = new BMap.Geocoder(), centerPoint = null, bdary = new BMap.Boundary(), i = 0, j = 0, city = '', regions = [], colors = [], isMarker = false, latestMarkerInfo = null, latestMarkerPoint = null, latestPolygon = null, gridRegions = [], tpl = null, view = null, loadType = 1, scrollFunc = function(e) &#123; e=e || window.event; if (parseInt(mp.getZoom()) &gt;= 15) &#123; $('.add-marker').removeClass('hide'); $('.save-region-grid').addClass('hide'); if (loadType == 1) &#123; loadGridRegions(); loadType = 2; &#125; &#125; else &#123; $('.add-marker').addClass('hide'); $('.save-region-grid').addClass('hide'); isMarker = false; if (loadType == 2) &#123; loadGridRegions(); loadType = 1; &#125; &#125; &#125;, setBasicDatas = function() &#123; city = '成都市'; regions.push(&#123; id: 1, name: '金牛区' &#125;); regions.push(&#123; id: 2, name: '武侯区' &#125;); regions.push(&#123; id: 3, name: '锦江区' &#125;); regions.push(&#123; id: 4, name: '成华区' &#125;); regions.push(&#123; id: 5, name: '青羊区' &#125;); regions.push(&#123; id: 6, name: '龙泉驿区' &#125;); regions.push(&#123; id: 7, name: '青白江区' &#125;); regions.push(&#123; id: 8, name: '新都区' &#125;); regions.push(&#123; id: 9, name: '温江区' &#125;); regions.push(&#123; id: 10, name: '金堂县' &#125;); regions.push(&#123; id: 11, name: '郫都区' &#125;); regions.push(&#123; id: 12, name: '双流区' &#125;); regions.push(&#123; id: 13, name: '浦江县' &#125;); regions.push(&#123; id: 14, name: '大邑县' &#125;); regions.push(&#123; id: 15, name: '新津县' &#125;); regions.push(&#123; id: 16, name: '崇州市' &#125;); regions.push(&#123; id: 17, name: '都江堰市' &#125;); regions.push(&#123; id: 18, name: '彭州市' &#125;); regions.push(&#123; id: 19, name: '邛崃市' &#125;); colors = new Array( "rgb(0, 85, 194)", "rgb(5, 129, 163)", "rgb(16, 150, 154)", "rgb(7, 188, 153)", "rgb(195, 21, 15)", "rgb(222, 170, 1)", "rgb(221, 88, 5)", "rgb(177, 191, 55)", "rgb(49, 175, 80)", "rgb(190, 157, 2)", "rgb(14, 207, 173)", "rgb(56, 225, 81)", "rgb(43, 110, 163)", "rgb(0, 132, 160)", "rgb(169, 222, 12)", "rgb(51, 171, 177)", "rgb(5, 135, 217)", "rgb(218, 14, 7)", "rgb(174, 154, 2)", "rgb(9, 182, 153)" ) &#125;, setBoundaries = function(region, color) &#123; var pointCount = 0, polygon = null; bdary.get(region == '郫都区' ? '郫县' : region, function(rs)&#123; //获取行政区域 pointCount = rs.boundaries.length; //行政区域的点有多少个 for (i = 0; i &lt; pointCount; i++) &#123; polygon = new BMap.Polygon(rs.boundaries[i], &#123; strokeWeight: 1, strokeColor: "#fff", fillOpacity:0.2, fillColor:'#2480cc' &#125;); //建立多边形覆盖物 mp.addOverlay(polygon); //添加覆盖物 polygon.setDatas(&#123; type: 'region', detail: &#123; name: region &#125; &#125;); &#125; &#125;); &#125;, addMarker = function() &#123; $('#grid-region-form').removeClass('hide'); // 使用layer弹窗打开模板 layer.open(&#123; type: 1, title: '添加网格', skin: 'layui-layer-demo', //样式类名 closeBtn: 0, //不显示关闭按钮 anim: 2, shadeClose: true, //开启遮罩关闭 area : [ '784px', '240px' ], //宽高 content: $('#grid-region-form') &#125;); $("#grid-region-form form").validate(&#123; rules: &#123; &#125;, messages: &#123; &#125;, submitHandler:function(form)&#123; latestMarkerInfo = $("#grid-region-form form").serializeObject(); isMarker = true; layer.closeAll(); &#125; &#125;); &#125;, inGridPoint = null, markerPoint = function(point) &#123; if (latestMarkerPoint) &#123; mp.removeOverlay(latestMarkerPoint); &#125; latestMarkerPoint = point; // 创建点坐标 mp.addOverlay(latestMarkerPoint); latestMarkerPoint.enableDragging(); if (point.datas &amp;&amp; point.datas.detail &amp;&amp; point.datas.detail.name) &#123; latestMarkerPoint.setLabel(getMarkerLabel(point.datas.detail.name)); &#125; inGridPoint = point; &#125;, addPolygon = function() &#123; if (!latestMarkerPoint) &#123; console.log('请先添加应急中心！'); return false; &#125; if (latestPolygon) &#123; return false; &#125; var centerPoint = latestMarkerPoint.point; latestPolygon = new BMap.Polygon([ new BMap.Point(centerPoint.lng + 0.002, centerPoint.lat + 0.002), new BMap.Point(centerPoint.lng - 0.002, centerPoint.lat + 0.002), new BMap.Point(centerPoint.lng - 0.002, centerPoint.lat - 0.002), new BMap.Point(centerPoint.lng + 0.002, centerPoint.lat - 0.002) ], &#123;strokeColor:"red", strokeWeight:2, strokeOpacity:0.2, fillColor:'#fff'&#125;); //创建多边形 mp.addOverlay(latestPolygon); //增加多边形 latestPolygon.enableEditing(); latestPolygon.setDatas(&#123; type: 'polygon', detail: latestMarkerInfo &#125;); &#125;, contextMenu = null, dragMarker = function(e, ee, m)&#123; latestPolygon = filterOverLays(ol =&gt; ol.datas &amp;&amp; ol.datas.type == 'polygon' &amp;&amp; ol.datas.detail.id == m.datas.detail.id); latestPolygon.enableEditing(); loadType = 3; m.enableDragging(); latestMarkerPoint = m; inGridPoint = m; latestMarkerPoint.addEventListener("dragend", function(e) &#123; var result = BMapLib.GeoUtils.isPointInPolygon(e.point, latestPolygon); if (!result) &#123; alert('应急点必须在应急区域内！'); markerPoint(inGridPoint); &#125; else &#123; inGridPoint = new BMap.Marker(e.point); inGridPoint.setDatas(latestMarkerPoint.datas); &#125; &#125;); latestMarkerInfo = m.datas.detail; $('.save-region-grid').removeClass('hide'); &#125;, filterOverLays = function(fn) &#123; let overLays = mp.getOverlays(), filtered = []; for (i = 0; i &lt; overLays.length; i++) &#123; if (fn(overLays[i], i) === true) &#123; filtered.push(overLays[i]); &#125; &#125; return filtered.length == 1 ? filtered[0] : filtered; &#125;, saveMarker = function(e, ee, m) &#123; &#125;, editPolygon = function(e, ee, p) &#123; p.enableEditing(); &#125;, savePolygon = function(e, ee, p) &#123; &#125;, saveRegionGrid = function() &#123; // 判断中心点是否在区域范围内 var result = BMapLib.GeoUtils.isPointInPolygon(latestMarkerPoint.point, latestPolygon); if (!result) &#123; alert('应急中心点不能在区域范围之外'); return false; &#125; else &#123; geoc.getLocation(latestMarkerPoint.point, function(rs)&#123; let regionName = rs.addressComponents.district, region = null, regionIndex = -1, relateIndex = -1; for (i = 0; i &lt; regions.length; i++) &#123; if (regions[i].name == regionName) &#123; region = regions[i]; &#125; &#125; for (i = 0; i &lt; gridRegions.length; i++) &#123; if (gridRegions[i].region.name == regionName) &#123; regionIndex = i; &#125; &#125; if (regionIndex &lt; 0) &#123; gridRegions.push(&#123; region: region, relates: [] &#125;); regionIndex = gridRegions.length - 1; &#125; latestMarkerInfo.point = latestMarkerPoint.point; latestMarkerInfo.gridPoints = latestPolygon.ia; for (i = 0; i &lt; gridRegions[regionIndex].relates.length; i++) &#123; if (gridRegions[regionIndex].relates[i].id == latestMarkerInfo.id) &#123; relateIndex = i; &#125; &#125; if (relateIndex &gt;= 0) &#123; gridRegions[regionIndex].relates[relateIndex] = latestMarkerInfo; &#125; else &#123; gridRegions[regionIndex].relates.push(latestMarkerInfo); &#125; $('.save-region-grid').addClass('hide'); loadGridRegions(); &#125;); &#125; &#125;, loadGridRegions = function() &#123; filterOverLays(ol =&gt; ol.datas &amp;&amp; (ol.datas.type == 'marker' || ol.datas.type == 'polygon')).map(f =&gt; mp.removeOverlay(f)); loadType = 1; if (latestMarkerPoint) &#123; latestMarkerPoint.disableDragging(); latestMarkerPoint = null; &#125; if (latestPolygon) &#123; latestPolygon.disableEditing(); latestPolygon = null; &#125; isMarker = false; if (gridRegions.length &gt; 0 ) &#123; for (i = 0; i &lt; gridRegions.length; i++) &#123; for (j = 0; j &lt; gridRegions[i].relates.length; j++) &#123; var relate = gridRegions[i].relates[j], point = relate.point, gridPoints = relate.gridPoints, marker = new BMap.Marker(new BMap.Point(point.lng, point.lat)), polygon = new BMap.Polygon(gridPoints.map(gp =&gt; new BMap.Point(gp.lng, gp.lat)), &#123;strokeColor:"red", strokeWeight:1, strokeOpacity:0.3, fillColor:'rgb(253, 80, 0)'&#125;); mp.addOverlay(marker); mp.addOverlay(polygon); if (mp.getZoom() &gt;= 15) &#123; marker.setLabel(getMarkerLabel(relate.name)); &#125; marker.setDatas(&#123; type: 'marker', detail: relate &#125;); polygon.setDatas(&#123; type: 'polygon', detail: relate &#125;); contextMenu = new BMap.ContextMenu(); contextMenu.addItem(new BMap.MenuItem('重新定点', dragMarker.bind(marker))); marker.addContextMenu(contextMenu); contextMenu = new BMap.ContextMenu(); contextMenu.addItem(new BMap.MenuItem('重新定义范围', editPolygon.bind(polygon))); polygon.addContextMenu(contextMenu); &#125; &#125; tpl = grid_region_distribute_datas.innerHTML; view = $('#grid-region-distribute-view'); var a = 1; for (i = 0; i &lt; gridRegions.length; i++) &#123; regions.map(r =&gt; r.name == gridRegions[i].region.name ? r.grids = gridRegions[i].relates : a = 2); &#125; laytpl(tpl).render(regions, function(html)&#123; view.html(html); $('.center-zoom-region').click(function() &#123; for (i = 0; i &lt; $('.center-zoom-region').length; i++) &#123; $($('.center-zoom-region')[i]).parent().parent().removeClass('selected'); &#125; $(this).parent().parent().addClass('selected'); centerZoomRegion($(this).attr('data-name')); &#125;) $('.center-zoom-grid').click(function() &#123; let gridName = $(this).attr('data-name'), gridMarker = null; gridMarker = filterOverLays(ol =&gt; ol.datas &amp;&amp; ol.datas.type == 'marker' &amp;&amp; ol.datas.detail.name == gridName); gridMarker.setLabel(getMarkerLabel(gridName)); mp.centerAndZoom(gridMarker.point, 16); &#125;); &#125;); &#125; &#125;, getMarkerLabel = function(txt) &#123; let markerLabel = new BMap.Label(txt, &#123; offset:new BMap.Size(20,-10) &#125;); markerLabel.setStyle(&#123; 'border': 0, 'background-color': 'rgb(255, 255, 255, 0)' &#125;); return markerLabel; &#125;, colorRegion = function(region) &#123; filterOverLays(ol =&gt; ol.datas &amp;&amp; ol.datas.type == 'region').forEach(function(rp) &#123; if (rp.datas.detail.name == region) &#123; rp.setFillColor('red'); &#125; else &#123; rp.setFillColor('blue'); &#125; &#125;) &#125;, centerZoomRegion = function(region) &#123; mp.centerAndZoom(city + region, 13); colorRegion(region); &#125;, init = function(p) &#123; if (!p.containerId) &#123; return false; &#125; BMap.Polygon.prototype.datas = &#123;&#125;; BMap.Polygon.prototype.setDatas = function(datas) &#123; this.datas = datas; &#125;; BMap.Marker.prototype.datas = &#123;&#125;; BMap.Marker.prototype.setDatas = function(datas) &#123; this.datas = datas; &#125;; // 显示网格区域边界 gridRegions = p.gridRegions ? p.gridRegions : []; setBasicDatas();// 基础数据装载 mp = new BMap.Map(p.containerId); // 创建点坐标 mp.centerAndZoom(city, 12); // 初始化地图，设置中心点坐标和地图级别 mp.enableScrollWheelZoom(); // 显示行政区域边界 for(i = 0; i &lt; regions.length; i++)&#123; setBoundaries(regions[i].name, colors[i]); &#125; loadGridRegions(); // 地图添加点击时间 mp.addEventListener("click", function(e) &#123; if (isMarker) &#123; // isMarker为true时点击功能表示添加标注 let newMarker = new BMap.Marker(e.point); newMarker.setDatas(&#123; type: 'marker', detail: latestMarkerInfo &#125;); markerPoint(newMarker); latestMarkerPoint.addEventListener("dragend", function(e) &#123; var result = BMapLib.GeoUtils.isPointInPolygon(e.point, latestPolygon); if (!result) &#123; alert('应急点必须在应急区域内！'); markerPoint(inGridPoint); &#125; else &#123; inGridPoint = new BMap.Marker(e.point); inGridPoint.setDatas(latestMarkerPoint.datas); &#125; &#125;); addPolygon(); $('.save-region-grid').removeClass('hide'); &#125; else &#123; // 否则设置点击点为中心，放大地图 mp.centerAndZoom(e.point, 16); // 设置点击区域 geoc.getLocation(e.point, function(rs)&#123; var addComp = rs.addressComponents, regionPolygons = null; $('.region-select').val(addComp.district); colorRegion(addComp.district); &#125;); // 显示操作栏 scrollFunc(); &#125; &#125;); // 滚动监听地图缩放级别，控制操作栏的显示和隐藏 if(document.addEventListener)&#123; document.addEventListener('DOMMouseScroll',scrollFunc,false); &#125;//W3C window.onmousewheel=document.onmousewheel=scrollFunc;//IE/Opera/Chrome $('.region-select').html('&lt;option&gt;-切换目标区域-&lt;/option&gt;' + regions.map(r =&gt; '&lt;option value="' + r.name + '"&gt;' + r.name + '&lt;/option&gt;').join('')); $('.add-marker').click(function() &#123; addMarker(); &#125;); $('.save-region-grid').click(function() &#123; saveRegionGrid(); &#125;); $('.toggle-region-grid-list').click(function() &#123; if ($(this).hasClass('selected')) &#123; $(this).removeClass('selected'); $('#grid-region-distribute-view').addClass('hide'); &#125; else &#123; $(this).addClass('selected'); $('#grid-region-distribute-view').removeClass('hide'); &#125; &#125;); &#125;; return &#123; init: init &#125;&#125;());]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>百度地图api</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用闭包函数优化思维，重构代码]]></title>
    <url>%2F2018%2F01%2F30%2F%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96%E6%80%9D%E7%BB%B4%EF%BC%8C%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[前言闭包多是用匿名函数实现，在匿名函数中引用了外部变量，那这个匿名函数就形成了闭包。匿名函数拥有可动态编程的执行过程。巧妙使用可以让你的代码简约而不失优雅，灵活而不失约束。好了，正式切入本文的正题，使用闭包函数优化思维，重构代码。 下面是三种场景中对闭包的使用使用闭包遍历水果选择项闭包的声明语法：(function(参数){}(值))在声明的时候传值，该闭包函数会立即执行，例如下面代码中的fruitsItems函数。12345678910111213141516171819202122232425&lt;div id="fruits-items"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;// 遍历石榴，李子，橘子，生成水果复选框代码// 测试“声明的时候传值，该闭包函数会立即执行”let fruitsItems = (function(fruits) &#123; return fruits.map(it =&gt; '&lt;label&gt;&lt;input type="checkbox" name="' + it.name + '" title="' + it.title + '"/&gt;' + it.title + '&lt;/label&gt;').join('&lt;br&gt;');&#125;([ &#123;name: 'pomegranate', title: 'Pomegranate'&#125;, &#123;name: 'plum', title: 'Plum'&#125;, &#123;name: 'tangerine', title: 'Tangerine'&#125;]));// 闭包中使用匿名函数let fruits = (function() &#123; return &#123; setItems: function(array_items) &#123; return array_items.map(it =&gt; '&lt;label&gt;&lt;input type="checkbox" name="' + it.name + '" title="' + it.title + '"/&gt;' + it.title + '&lt;/label&gt;').join('&lt;br&gt;'); &#125; &#125;&#125;())// 赋值$('#fruits-items').html(fruits.setItems([ &#123;name: 'apple', title: 'Apple'&#125;, &#123;name: 'banana', title: 'Banana'&#125;])).append('&lt;br&gt;').append(fruitsItems);&lt;/script&gt; 筛选出年级小于并等于25岁的女性同事筛选前姓名：Winnie，年龄：25，性别：female姓名：Jim，年龄：29，性别：male姓名：Anson，年龄：27，性别：male姓名：Danica，年龄：23，性别：female 筛选后姓名：Winnie，年龄：25，性别：female姓名：Danica，年龄：23，性别：female12345678910111213141516171819202122232425262728293031323334&lt;div&gt;筛选前&lt;/div&gt;&lt;div id="workmates"&gt;&lt;/div&gt;&lt;div&gt;筛选后&lt;/div&gt;&lt;div id="filtered-workmates"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;let wms = (function() &#123; var datas = [ &#123;name: 'Winnie', age: 25, sex: 'female'&#125;, &#123;name: 'Jim', age: 29, sex: 'male'&#125;, &#123;name: 'Anson', age: 27, sex: 'male'&#125;, &#123;name: 'Danica', age: 23, sex: 'female'&#125; ]; return &#123; init: function() &#123; return this.htmls(datas); &#125;, filter: function(fn) &#123; let filtered = []; for (let i = 0; i &lt; datas.length; i++) &#123; // 重点：将遍历对象传递出去，任意开发人员进行条件设置，满足了就被筛选成功 if (fn(datas[i], i) === true) &#123; filtered.push(datas[i]); &#125; &#125; return this.htmls(filtered); &#125;, htmls: function (renders) &#123; return renders.map(wm =&gt; '&lt;label&gt;姓名：' + wm.name + '，年龄：' + wm.age + '，性别：' + wm.sex +'&lt;/label&gt;').join('&lt;br&gt;'); &#125; &#125;&#125;());$('#workmates').html(wms.init());$('#filtered-workmates').html(wms.filter(wm =&gt; wm.age &lt;= 25 &amp;&amp; wm.sex === 'female'));&lt;/script&gt; 实现一个数据处理过程的匿名函数重构传入 5执行成功返回 {status: ‘success’, data: 10}执行失败返回 {status: ‘failed’, error: ‘xxx’}传入 [2, 3]执行成功返回 {status: ‘success’, data: [{status: ‘success’, data: 4}, {status: ‘success’, data: 6}]}执行失败返回 {status: ‘success’, data: [{status: ‘failed’, error: ‘xxx’}, {status: ‘failed’, error: ‘xxx’}]} 普通js代码代码冗余，相同的代码重复写，机械化。1234567891011121314151617181920212223242526272829303132function multiple(inNum) &#123; if (Array.isArray(inNum)) &#123; return &#123; status: 'success', data: inNum.map(it =&gt; &#123; if (isNaN(parseFloat(it))) &#123; return &#123; status: 'failed', error: 'the input is not a number' &#125; &#125; return &#123; status: 'success', data: it * 2 &#125;; &#125;); &#125; &#125; else &#123; if (isNaN(parseFloat(inNum))) &#123; return &#123; status: 'failed', error: 'the input is not a number' &#125; &#125; return &#123; status: 'success', data: inNum * 2 &#125;; &#125;&#125; 重构后 execute 方法只管输入输出的格式和错误处理，包揽了所有脏活累活；multiple 方法则只关心业务的具体实现，也不用关心输入的是单个元素还是数组。如果要改乘 3，只要修改 multiple 方法最后一个 return。优秀!12345678910111213141516171819202122232425262728293031323334function execute(data, fn) &#123; let single = it =&gt; &#123; try &#123; return &#123; status: 'success', data: fn(it) &#125; &#125; catch (e) &#123; return &#123; status: 'failed', data: e.toString() &#125; &#125; &#125;; if (Array.isArray(data)) &#123; return &#123; status: 'success', data: data.map(single) &#125;; &#125; else &#123; return single(data); &#125;&#125;function multiple(inNum) &#123; return execute(inNum, it =&gt; &#123; if (isNaN(parseFloat(it))) &#123; throw new Error('the input is not a number'); &#125; return it * 2; &#125;)&#125; 结尾本文练习总结结果源于阅读“微信公众号：前端早读课”的“【第1073期】巧用匿名函数重构你的代码”一文，进行自身场景的练习，转换成技能为我所用。本文只做日常技术知识积累记录所用，侵删。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>js优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringCloud客户端项目构建(使用Freemarker)]]></title>
    <url>%2F2017%2F10%2F17%2FSpringCloud%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA(%E4%BD%BF%E7%94%A8Freemarker)%2F</url>
    <content type="text"><![CDATA[背景作为一个具备java基础的前端工程师，了解到Spring boot是下一代的web框架，而Spring Cloud则是最新最火的微服务的翘楚，有必要在此记录他的项目构建方案，本文适用于前端开发小组的项目搭建，该项目的特性是不作为服务端发布，作为客户端发布，主要基于Spring Cloud，围绕Freemarker技术进行相关的配置，使用讲解。 前提请务必确保你的机器上安装了Eclipse Java EE IDE for Web Develipers.我的版本是Mars.2 Release(4.5.2),这将是特别重要的关键的一步， Eclipse在手，天下我有。 请务必一定程度的了解Spring Cloud模式和概念。 请务必一定程度的了解Freemarker功能使用方法。 步骤下载在Help-Eclipse MarketPlace的搜索下载sts(Spring Tools(aka Spring IDE and Spring Tool Suite)), 安装等待，成功后重启Eclipse。 构建项目此时已经成功的下载sts, 第一步 创建基于MAVEN的SpringCloud项目在Java EE模式下的Project Ecplorer窗口中，右键new-Other-Spring-Spring Starter Project。 作为前端小组开发的基于客户端的项目，构建的时候必须加载Eureka Discovery组件（服务注册，用于向Eureka Server注册，将客户端信息发送到Eureka Server），Feign组件（作为HTTP客户端调用远程HTTP服务），Ribbon组件（负载均衡）。 作为服务提供开发组的微服务项目，构建时在上面的基础上还需要加载Eureka Server组件（用于发布可调用的服务），Zuul组件（路由 ）等…具体根据项目实际需求决定。 加载的组件，可在新建项目的第二步搜索勾选组件，也可自行配置pom.xml文件，如下（客户端开发小组项目配置示例）：123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; ...&lt;/dependencies&gt; 客户端项目开发还需要使用Freemarker等其他基本库，则需要在pom.xml中添加配置，如下：12345678910111213141516171819202122232425262728293031323334353637383940&lt;!-- Freemarker --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- Spring boot basic --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- alibaba --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.1.15&lt;/version&gt;&lt;/dependency&gt;&lt;!-- java developers' basic jar 1--&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.4&lt;/version&gt;&lt;/dependency&gt;&lt;!-- java developers' basic jar 2--&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt; &lt;artifactId&gt;json-lib&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;/dependency&gt;&lt;!-- 企业封装工具包 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.emin&lt;/groupId&gt; &lt;artifactId&gt;base&lt;/artifactId&gt; &lt;version&gt;v1.8&lt;/version&gt;&lt;/dependency&gt; 项目创建成功之后，选中项目名右键Maven-Update Project-勾选项目-ok。 Tips a. 删除项目路径下的mvnw文件和mvnw.cmd文件 b. Maven配置找不到包，需要配置Maven的settings 配置User Settings的文件settings.xml，文件内容如下：settings.xml1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt; &lt;localRepository&gt;E:/repo&lt;/localRepository&gt; &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; &lt;offline&gt;false&lt;/offline&gt; &lt;pluginGroups&gt;&lt;/pluginGroups&gt; &lt;proxies&gt;&lt;/proxies&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;dz-publish&lt;/id&gt; &lt;username&gt;dz-publish&lt;/username&gt; &lt;password&gt;dzpublish&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;dz-server-mirror&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;dz inner maven nexus server&lt;/name&gt; &lt;url&gt;http://192.168.0.250:10004/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt;&lt;/profiles&gt;&lt;/settings&gt; 您需要关心localRepository节点，mirrors-mirror-url节点的配置。localRepository节点配置Maven将jar包加载在本地的那个磁盘路径里；url节点配置Maven从何处去下载jar包；配置信息根据企业实际项目情况约定。 修改生成你的配置文件，放置在本地的指定目录下；Eclipse状态栏-Windows-Preferences-Maven-User Settings，找到你的配置文件详细路径配置在User Settings的文本框中-Apply-ok。 第二步 项目配置（客户端项目的应用配置）项目创建成功后，你会发现该项目自动生成了一些文件，没用的我已经在上面建议你删除掉了，现在先介绍我们没有删掉的有用的文件。 目录1 src/main/javaz 该目录下的生成了一个XXXAppication.java的文件，这个文件用于项目启动。 启动方式 ：选中该文件，右键Run As-Spring Boot App（建议在完成了第三步 目录资源整理后再尝试） 目录2 sec/main/resources 该目录下生成了一个application.properties的文件，这个文件用于项目配置。 配置方式: 为了配置信息使用树状结构展示更加清晰了然，建议您将properties后缀改成yml后缀。 配置项目合作的微服务中心地址1234eureka: client: serviceUrl: defaultZone: http://192.168.0.223:8761/eureka/ 配置项目的端口号12server: port: 8765 配置项目名称，Freemarker信息1234567891011121314151617spring: application: name: wxbase freemarker: allow-request-override: false cache: true checkTemplateLocation: true charSet: UTF-8 contentType: text/html exposeRequestAttributes: true exposeSessionAttributes: true exposeSpringMacroHelpers: false suffix: .html templateLoaderPath: classpath:/ prefer-file-system-access: false settings: templateExceptionHandler: ignor ++Freemarker配置说明++ templateLoaderPath对应的值（classpath:/）表示的是根目录，它用于后台服务返回页面的路径使用，在此有一个稍微的概念，后面具体使用了解。 suffix对应的值（.html）表示的是页面模板的后缀，有的项目使用ftl后缀，后台服务返回页面的时候就会找ftl后缀的页面，也可以理解为后台服务返回页面时自动加上了配置好的后缀。 至此，项目配置完成。 第三步 目录资源整理 重点1：我强烈的建议你将前端的css、js、图片等文件作为静态资源放置在src/main/resources下新建文件夹static目录下。 在XXXXApplication.java文件的同级目录下，新建我们此处命名为WebMvcConfig.java文件，它将是我们手动的编写一个拦截器，目的是在项目启动的时候，将静态资源的访问路径注册到根目录下(你也可以有其它的目的，根据你的项目实际情况来)，内容如下： WebMvcConfig.java1234567891011121314151617181920212223package com.emin.platform.wxbase; import org.springframework.beans.factory.annotation.Configurable;import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; @Configurable @EnableWebMvc public class WebMvcConfig extends WebMvcConfigurerAdapter&#123; @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123; configurer.favorPathExtension(false); &#125; @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler("/js/**") .addResourceLocations("classpath:/static/js/"); registry.addResourceHandler("/css/**") .addResourceLocations("classpath:/static/css/"); registry.addResourceHandler("/img/**") .addResourceLocations("classpath:/static/img/"); &#125; &#125; 完成了这个文件的编写，我们可以在前端的页面上通过/js、/css、/img去访问我们的静态资源，不会暴露它具体在哪个路径下。 @Configurable、@EnableWebMvc这两个注解会确保该文件在项目启动的时候被执行。 重点2：我们要在src/main下面新建webapp的文件夹，点击webapp文件夹，右键-Build Path-Use as Source Folder。 webapp文件夹下将会放置我们的项目开发的模块或者页面代码。 至于Use as Source Folder这个操作可以让我们后台通过’classpath:/‘直接访问webapp下面的文件，意思是：用户发送请求到后台服务，后台服务经过一系列的数据处理，通过访问页面路径的形式将处理结果信息返回到页面上，’classpath:/‘将会是webapp这个文件夹的路径。而上文中我们在application.yml中配置了templateLoaderPath的值为’classpath:/‘,那么此时webapp文件夹的访问路径就等于该项目的根’/‘。 举例说明： 在src/main/weapp目录下新建index.html, 内容如下： index.html1234567891011 &lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0"&gt;&lt;title&gt;主页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt; 在XXXXApplication.java的同级目录下新建controller包，在该包下new一个IndexController.java文件。内容如下： IndexController.java12345678910111213141516171819202122package com.emin.platform.wxbase.controller;import java.io.UnsupportedEncodingException;import javax.servlet.http.HttpServletRequest;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.servlet.ModelAndView; @RestControllerpublic class IndexController&#123; @ResponseBody @RequestMapping(value = "/",method = RequestMethod.GET) public ModelAndView index(HttpServletRequest request) throws UnsupportedEncodingException&#123; ModelAndView mv = new ModelAndView("index"); return mv; &#125;&#125; 该Controller将项目的根目录访问指向了index.html页面，’.html’的后缀是项目配置里配置好了的，能找到webapp下的index.html页面,也是因为我们将webapp文件夹配置为Use as Source Folder。 微服务合作开发在项目配置里，我们配好了项目合作的微服务中心地址。现在我们在controller同级目录建立一个interfaces包,此包下的文件用于合作服务接口开发。 举例 WxApiFeign.java123456789101112131415161718192021222324252627package com.emin.platform.wxbase.interfaces;import org.springframework.cloud.netflix.feign.FeignClient;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;@FeignClient(value = "service-zuul")public interface WxApiFeign &#123; /** * 保存微信公众号 * @param wxOfficialAccount 微信公众实体JSON字符串 * @return */ @RequestMapping(value = "/api-wx/woa/createOrUpdate",method = RequestMethod.POST) String saveWxoa(@RequestBody String wxOfficialAccount); /** * 加载微信公众号列表 * @param companyId 公司id * @return */ @RequestMapping(value = "/api-wx/woa/&#123;companyId&#125;/woalist",method = RequestMethod.GET) String loadWxoas(@PathVariable(value="companyId") Long companyId);&#125; 说明 @FeignClient(value = “service-zuul”)中的value值是合作方提供给你的，这是合作微服务项目的网关名称。 @RequestMapping(value = “/api-wx/woa/createOrUpdate”,method = RequestMethod.POST)中的value值是调用的具体接口路径，ip前缀地址就是我们已经项目配置中的++配置项目合作的微服务中心地址++，method值制定接口的访问方式。 到此，我们就建立好了微服务合作开发的连接。 然后我们新建WxoaController中使用WxApiFeign中的接口 代码片 WxoaController.java1234567891011121314151617181920212223242526...@Controller@RequestMapping("/wxoa")public class WxoaController extends BaseController &#123; @Autowired WxApiFeign wxApiFeign; @RequestMapping("/index") @ResponseBody public ModelAndView goManage()&#123; ModelAndView mv = new ModelAndView("modules/wxoa/manage"); String res = wxApiFeign.loadWxoas(1l); JSONObject data = JSONObject.parseObject(res); mv.addObject("data", data); return mv; &#125; @RequestMapping("/saveWxoa") @ResponseBody public JSONObject saveWxoa(String jsonStr)&#123; String res = wxApiFeign.saveWxoa(jsonStr); JSONObject json = JSONObject.parseObject(res); return json; &#125;&#125; 以上，我们完成了微服务合作开发。 Freemarker在项目中的使用Freemarker在项目中是一个数据模板开发的概念，如上WxoaController的goManage方法将会返回根目录下modules/wxoa/manage.html页面模板，通过ModelAndView对象装载了页面模板的地址和服务器的处理结果数据，我们在modules/wxoa/manage.html页面上解析处理结果数据的过程则使用了Freemarker，如下： modules/wxoa/manage.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;style&gt; .devicesMsg&#123; padding:2px; margin-right:15px; background:#DADADA; &#125;&lt;/style&gt;&lt;#setting datetime_format='yyyy-MM-dd HH:mm:ss'&gt;&lt;#setting date_format='yyyy-MM-dd'&gt;&lt;div class="wrapper-content"&gt; &lt;div class="row"&gt; &lt;div class="col-sm-12"&gt; &lt;div class="ibox float-e-margins"&gt; &lt;div class="ibox-title"&gt; &lt;h5&gt;微信公众号管理&lt;/h5&gt; &lt;div class="ibox-tools"&gt; &lt;a class="btn btn-primary btn-xs" href="javascript:goPage('form')"&gt; &lt;i class="fa fa-plus"&gt;&lt;/i&gt;添加 &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ibox-content"&gt; &lt;div class="filter-line"&gt; &lt;form method="get" class="dr-search-form" id="wxoaSearchForm"&gt; &lt;input type="hidden" name="page"&gt; &lt;input placeholder="关键字查询" class="form-control" type="text" name="keyword" value="$&#123;keyword!''&#125;" role="user-params"&gt; &lt;button type="button" class="btn btn-primary" role="submit"&gt;搜索&lt;/button&gt; &lt;button type="button" class="btn btn-default" role="reset"&gt;重置&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;table class="footable table table-stripped toggle-arrow-tiny" id="wxoaTable" data-paging="false"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th data-toggle="true"&gt;企业名称&lt;/th&gt; &lt;th&gt;微信号&lt;/th&gt; &lt;th&gt;类型&lt;/th&gt; &lt;th&gt;appId&lt;/th&gt; &lt;th&gt;appSecret&lt;/th&gt; &lt;th&gt;Token&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;#if data?? &amp;&amp; data.success&gt; &lt;#list data.result as d&gt; &lt;tr&gt; &lt;td&gt;$&#123;d.companyName&#125;&lt;/td&gt; &lt;td&gt;$&#123;d.companyCode&#125;&lt;/td&gt; &lt;td&gt;&lt;#if d.type==1&gt;订阅&lt;#elseif d.type==2&gt;服务&lt;#elseif d.type==3&gt;企业&lt;#else&gt;小程序&lt;/#if&gt;&lt;/td&gt; &lt;td&gt;$&#123;d.appId&#125;&lt;/td&gt; &lt;td&gt;$&#123;d.appSecret&#125;&lt;/td&gt; &lt;td&gt;$&#123;d.token&#125;&lt;/td&gt; &lt;td&gt; &lt;a href="javascript: goPage('form?id=$&#123;d.id&#125;')" class="ipc-edit"&gt;&lt;i class="fa fa-pencil text-navy"&gt;&lt;/i&gt; 编辑&amp;nbsp;&amp;nbsp;&lt;/a&gt; &lt;a href="javascript: remove('$&#123;d.id&#125;', 'wxoa');" class="ipc-remove"&gt;&lt;i class="fa fa-trash text-navy" &gt;&lt;/i&gt; 停用&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/#list&gt; &lt;#else&gt; &lt;tr&gt; &lt;td colspan="7"&gt;暂无数据&lt;/td&gt; &lt;/tr&gt; &lt;/#if&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; ‘&lt;#’开头的标签则是Freemarker语法。在上面的示例中Freemarker遍历了服务器的结果数据，将数据展示在了页面上，更多Freemarker的语法请参考更专业的文章。 结语感谢您的阅读。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Sublime Text中使用代码规范检查工具]]></title>
    <url>%2F2017%2F07%2F12%2F%E5%9C%A8Sublime-Text%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[背景无规矩不成方圆，业内已存在合理和规范的前端开发标准，合理的使用检查工具能够节约时间成本，同时养成优秀的代码习惯。本文所述的配置基于Sublime Text编辑器，基于Code Guide前端开发规范文档; 本文目前只涉及js代码规范检查，核心内容是Eslint工具的使用以及结合Sublime Text的配置。 准备工作 去百度搜索完成Sublime Text 3的安装和配置 安装和学习使用nodejs，参考Nodejs的安装和配置（Windows）) 核心内容 Eslint简介 Eslint由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。 ESLint 主要有以下特点： 默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移； 规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用； 包含代码风格检测的规则（可以丢掉 JSCS 了）； 支持插件扩展、自定义规则。 安装Eslint 使用nodejs的npm工具全局安装，语法如下： npm install eslint -g 配置Eslint代码风格 在项目或工程的的根目录新建.eslintrc.js文件，基于Code Guide前端开发规范文档JAVASCRIPT部分的规范, 文件内容建议如如下： module.exports = { &quot;env&quot;: { &quot;browser&quot;: true }, &quot;extends&quot;: &quot;eslint:recommended&quot;, &quot;rules&quot;: { &quot;camelcase&quot;: 2, // 强制驼峰法命名 &quot;id-match&quot;: 2, // 禁止重复定义 &quot;indent&quot;: [2,&quot;tab&quot;], // 缩进采取Tab &quot;semi&quot;: [2, &quot;always&quot;], // 语句强制分号结尾 &quot;quotes&quot;: [2,&quot;single&quot;], // 引号类型 单引号 &quot;no-dupe-args&quot;: 2,// 函数参数不能重复 &quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{} &quot;one-var&quot;:2, // 语句块不允许出现连续两个var &quot;vars-on-top&quot;: 2, // 定义的变量必须在作用域的顶部 &quot;newline-after-var&quot;: 2, // 定义完变量必须换一行 &quot;space-before-blocks&quot;: [2, &quot;always&quot;],//不以新行开始的块{前面要不要有空格 &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],//函数定义时括号前面要不要有空格 &quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格 &quot;space-in-parens&quot;: [2, &quot;never&quot;],//小括号里面要不要有空格 &quot;space-infix-ops&quot;: 2,//中缀操作符周围要不要有空格 &quot;space-unary-ops&quot;: [2, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格 &quot;spaced-comment&quot;: 2,//注释风格要不要有空格什么的 &quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行 &quot;operator-linebreak&quot;: [2, &quot;after&quot;],// 换行时运算符在行尾还是行首 &quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; &quot;no-unreachable&quot;: 2,// 不能有无法执行的代码 &quot;default-case&quot;: 2,//switch语句最后必须有default &quot;no-sequences&quot;: 0,//禁止使用逗号运算符 &quot;no-empty&quot;: 2,// 块语句中的内容不能为空 &quot;no-eq-null&quot;: 2, // 禁止对null使用==或!=运算符 &quot;eqeqeq&quot;: 2,//必须使用全等 &quot;use-isnan&quot;: 2,// 禁止比较时使用NaN，只能用isNaN() &quot;no-underscore-dangle&quot;: 2, //标识符不能以下划线开头 &quot;no-undef&quot;: 2, // 不能有未定义的变量 &quot;no-use-before-define&quot;: 2,// 未定义前不能使用 &quot;no-unused-vars&quot;: [1, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],// 不能有声明后未被使用的变量或参数 &quot;no-alert&quot;: 1, // 警告弹窗 &quot;no-console&quot;: 1, // 警告控制台输出 &quot;no-debugger&quot;: 1, // 警告debugger &quot;no-trailing-spaces&quot;: 1, //一行结束后不能有空格 &quot;eol-last&quot;: 0, //文件以单一的换行符结尾 &quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行 } }; 检查代码规范 在项目或工程的根目录打开CMD，使用如下语法检查指定文件 eslint --fix [file.js][dir] 例如 eslint --fix js\leave_timepicker.js 此操作会通过控制台输出检查出来的错误信息，错误信息包含行数以及错误的原因，但是不够智能，我们要达到在日常代码编辑的过程中达到提示和修复的功能，就需要将Eslint集成到Sublime Text编辑器啦 集成Sublime Text 在 Sublime Text 中你需要安装两个插件： 安装 SublimeLinter调出package control搜索SublimeLinter进行安装 安装 SublimeLinter-contrib-eslint调出package control搜索eslint安装即可，全名：SublimeLinter-contrib-eslint。注意：该插件只支持Sublime text 3 关闭编辑器，再打开编辑器, 导入项目。打开任意js文件，右键-&gt;SublimeLinter-&gt;LintMode-&gt;点击Save Only, 设置为在文件进行保存操作后检查的模式。 以上，请享用Eslint带来的便利。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs 的安装和配置(Windows)]]></title>
    <url>%2F2017%2F07%2F12%2FNodejs%20%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE(Windows)%2F</url>
    <content type="text"><![CDATA[简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm(node package manage)，是全球最大的开源库生态系统。 安装 下载nodejs下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js 直接点击【下一步】,记住安装路径(一般不安装在C盘，占内存),直至Node.js安装完成 打开cmd命令窗口，测试nodejs是否安装成功“node -v”, 测试npm是否安装成功“npm -v” 新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 安装完后的目录如下图所示： 环境配置说明: 这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install bower [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。 例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【nodeg_lobal】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入： npm config set prefix &quot;D:\Develop\nodejs\node\_global&quot; npm config set cache &quot;D:\Develop\nodejs\node\_cache&quot; 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”进入环境变量对话框在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 测试配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装： npm install express -g NPM常用语法 npm -v&nbsp;&nbsp;检查版本，常用于测试是否安装成功 npm init初始化项目信息, 会引导你创建一个package.json文件（项目配置文件），包括名称、版本、作者这些信息等 npm install [-g] [–save-dev]安装插件-g&nbsp;全局安装–save&nbsp;保存配置信息至package.json–save-dev&nbsp;保存配置信息至package.json的devDependencies节点 npm uninstall [-g] [–save-dev]删除插件, 不要直接删除本地插件包文件，要使用命令删除 npm update [-g] [–save-dev]更新插件,不指定时更新全部 npm list&nbsp;&nbsp;查看当前目录下安装的node包npm list -g&nbsp;&nbsp; 查看全局安装的node包 选装CNPM NPM安装插件是从国外服务器下载的，会存在下载速度慢甚至下载失败的问题，来自国内淘宝团队开发管理的CNPM能解决此问题，CNPM同步NPM的频率为10分钟一次，CNPM和NPM的语法完全一致,。 CNPM官方地址 安装CNPM npm install cnpm -g--registry=https://registry.npm.taobao.org 安装完成后查看版本号cnpm -v或关闭命令提示符重新打开，否则会报错]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由一个疑似弱鸡引发的联想]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%94%B1%E4%B8%80%E4%B8%AA%E7%96%91%E4%BC%BC%E5%BC%B1%E9%B8%A1%E5%BC%95%E5%8F%91%E7%9A%84%E8%81%94%E6%83%B3%2F</url>
    <content type="text"><![CDATA[我为什么会碰到一个疑似弱鸡，这似乎又是一个漫长的故事。想必人生来就是需要爱和自由的吧，从某一天起，你甘愿多一些奔波和劳累，让一些人变得越来越离不开；正好进入了白昼变长的时期，身体不再留恋多余的睡眠；正好进入了项目阶段性结业的时期，没有工作的时间只想奔向一个舒适的怀抱。 在这条奔向爱和自由的旅途中，我遇见了一个疑似弱鸡：那是一种在人群中会被无视的长相，扎进骨子里的自卑和盲目的自信。而他靠近的小姑娘，同样文静怯弱。我只是在思考：若我能有一大片空隙的空间看到他那么一个具有侵犯性的姿势，他怎么会失去一小点的脑容量去思考侧过身体避免一些生理反应。我就那样看着看着，也许是身边的空隙已经大到他再不移动已经说不过去了，也许他感受到了来自Danica的凝视，我无暇多想，小姑娘下车了，我看到她绯红的脸颊和一丝带着恨意的眼神。 地铁持续前行，疑似弱鸡也到站下车，眼角边似乎清净了，这个小插曲也被湮没在了拥挤的人流中，就像不曾发生过。 思绪泛滥，想到刚毕业的时候我去了北京，见过更拥挤的人流，经历过不疑似而肯定的弱鸡们，望着脚上的铆钉鞋，若是再遇见他们，我的铆钉们绝对会毫不犹豫的定位他们的裆部，用我这些年吸收的脏话大全，唾沫横飞的飚向他们的猥琐面孔，顺带两大耳刮子…然而我当时最厉害的不过也是一句对他母亲的问候，更多的时候憋屈的说不出话，泪水往肚子里吞。 生活已经把我变成了随身携带小刀片的女战士啦，看着车窗里倒映的自己的大脸盘子，笑了笑，这些个弱鸡们，真不是个东西，呸！]]></content>
      <categories>
        <category>life协奏曲</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Git生成并配置SSH密钥]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E7%94%9F%E6%88%90%E5%B9%B6%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5%2F</url>
    <content type="text"><![CDATA[前提安装git到本地，能在cmd中使用git命令行 步骤1.设置全局用户名和邮箱git config –global user.name “kakadanica”git config –global user.email “kakadanica.gmail.com”2.生成SSH密钥ssh-keygen -t rsa -C “kakadnaica@gmail.com”如果你之前有生成过，控制台会提示你already exist，并给你打印出密钥的地址，建议删除后重新生成。如果你之前未生成过，直接敲三个回车，密码为空，将会提示你生成成功并显示例如：Your identification has been saved in /c/Users/E450/.ssh/id_rsa.Your public key has been saved in /c/Users/E450/.ssh/id_rsa.pub.The key fingerprint is:3.添加密钥到github上找到id_rsa.pub文件，使用记事本打开，复制内容。登录GitHub，到https://github.com/settings/keys该页面中，新建new SSH Key。输入任意Title，将刚刚复制的内容粘贴到key中，保存提交。 结果在cmd中执行ssh git@github.com命令操作Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,192.30.255.112’ (RSA) to the list of known hosts.PTY allocation request failed on channel 0Hi kakadanica! You’ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.如上，表示设置成功！]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在cmd中执行git命令行操作]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E5%9C%A8cmd%E4%B8%AD%E6%89%A7%E8%A1%8Cgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[此情况发生场景安装git时未勾选Windows Explorer integration,在需要操作git命令行时，找不到操作面板 解决方案：配置环境变量1) 新建系统变量 GIT_HOME:[git安装地址（例如：D:\Program Files\Git)]2) 编辑Path,新建“%GIT_HOME%\usr\bin”和“%GIT_HOME%\bin” 结果打开cmd,任意使用git命令进行需要的操作]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>