<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在Sublime Text中使用代码规范检查工具]]></title>
    <url>%2F2017%2F07%2F12%2F%E5%9C%A8Sublime-Text%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[背景无规矩不成方圆，业内已存在合理和规范的前端开发标准，合理的使用检查工具能够节约时间成本，同时养成优秀的代码习惯。本文所述的配置基于Sublime Text编辑器，基于Code Guide前端开发规范文档; 本文目前只涉及js代码规范检查，核心内容是Eslint工具的使用以及结合Sublime Text的配置。 准备工作 去百度搜索完成Sublime Text 3的安装和配置 安装和学习使用nodejs，参考Nodejs的安装和配置（Windows）) 核心内容 Eslint简介 Eslint由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。 ESLint 主要有以下特点： 默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移； 规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用； 包含代码风格检测的规则（可以丢掉 JSCS 了）； 支持插件扩展、自定义规则。 安装Eslint 使用nodejs的npm工具全局安装，语法如下： npm install eslint -g 配置Eslint代码风格 在项目或工程的的根目录新建.eslintrc.js文件，基于Code Guide前端开发规范文档JAVASCRIPT部分的规范, 文件内容建议如如下： module.exports = { &quot;env&quot;: { &quot;browser&quot;: true }, &quot;extends&quot;: &quot;eslint:recommended&quot;, &quot;rules&quot;: { &quot;camelcase&quot;: 2, // 强制驼峰法命名 &quot;id-match&quot;: 2, // 禁止重复定义 &quot;indent&quot;: [2,&quot;tab&quot;], // 缩进采取Tab &quot;semi&quot;: [2, &quot;always&quot;], // 语句强制分号结尾 &quot;quotes&quot;: [2,&quot;single&quot;], // 引号类型 单引号 &quot;no-dupe-args&quot;: 2,// 函数参数不能重复 &quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{} &quot;one-var&quot;:2, // 语句块不允许出现连续两个var &quot;vars-on-top&quot;: 2, // 定义的变量必须在作用域的顶部 &quot;newline-after-var&quot;: 2, // 定义完变量必须换一行 &quot;space-before-blocks&quot;: [2, &quot;always&quot;],//不以新行开始的块{前面要不要有空格 &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],//函数定义时括号前面要不要有空格 &quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格 &quot;space-in-parens&quot;: [2, &quot;never&quot;],//小括号里面要不要有空格 &quot;space-infix-ops&quot;: 2,//中缀操作符周围要不要有空格 &quot;space-unary-ops&quot;: [2, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格 &quot;spaced-comment&quot;: 2,//注释风格要不要有空格什么的 &quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行 &quot;operator-linebreak&quot;: [2, &quot;after&quot;],// 换行时运算符在行尾还是行首 &quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; &quot;no-unreachable&quot;: 2,// 不能有无法执行的代码 &quot;default-case&quot;: 2,//switch语句最后必须有default &quot;no-sequences&quot;: 0,//禁止使用逗号运算符 &quot;no-empty&quot;: 2,// 块语句中的内容不能为空 &quot;no-eq-null&quot;: 2, // 禁止对null使用==或!=运算符 &quot;eqeqeq&quot;: 2,//必须使用全等 &quot;use-isnan&quot;: 2,// 禁止比较时使用NaN，只能用isNaN() &quot;no-underscore-dangle&quot;: 2, //标识符不能以下划线开头 &quot;no-undef&quot;: 2, // 不能有未定义的变量 &quot;no-use-before-define&quot;: 2,// 未定义前不能使用 &quot;no-unused-vars&quot;: [1, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],// 不能有声明后未被使用的变量或参数 &quot;no-alert&quot;: 1, // 警告弹窗 &quot;no-console&quot;: 1, // 警告控制台输出 &quot;no-debugger&quot;: 1, // 警告debugger &quot;no-trailing-spaces&quot;: 1, //一行结束后不能有空格 &quot;eol-last&quot;: 0, //文件以单一的换行符结尾 &quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行 } }; 检查代码规范 在项目或工程的根目录打开CMD，使用如下语法检查指定文件 eslint --fix [file.js][dir] 例如 eslint --fix js\leave_timepicker.js &gt; 此操作会通过控制台输出检查出来的错误信息，错误信息包含行数以及错误的原因，但是不够智能，我们要达到在日常代码编辑的过程中达到提示和修复的功能，就需要将Eslint集成到Sublime Text编辑器啦 集成Sublime Text 在 Sublime Text 中你需要安装两个插件： 安装 SublimeLinter调出package control搜索SublimeLinter进行安装 安装 SublimeLinter-contrib-eslint调出package control搜索eslint安装即可，全名：SublimeLinter-contrib-eslint。注意：该插件只支持Sublime text 3 关闭编辑器，再打开编辑器, 导入项目。打开任意js文件，右键-&gt;SublimeLinter-&gt;LintMode-&gt;点击Save Only, 设置为在文件进行保存操作后检查的模式。 以上，请享用Eslint带来的便利。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs 的安装和配置(Windows)]]></title>
    <url>%2F2017%2F07%2F12%2FNodejs%20%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE(Windows)%2F</url>
    <content type="text"><![CDATA[简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm(node package manage)，是全球最大的开源库生态系统。 安装 下载nodejs下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js 直接点击【下一步】,记住安装路径(一般不安装在C盘，占内存),直至Node.js安装完成 打开cmd命令窗口，测试nodejs是否安装成功“node -v”, 测试npm是否安装成功“npm -v” 新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 安装完后的目录如下图所示： 环境配置说明: 这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install bower [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。 例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【nodeg_lobal】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入： npm config set prefix &quot;D:\Develop\nodejs\node\_global&quot; npm config set cache &quot;D:\Develop\nodejs\node\_cache&quot; 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”进入环境变量对话框在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 测试配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装： npm install express -g NPM常用语法 npm -v&nbsp;&nbsp;检查版本，常用于测试是否安装成功 npm init初始化项目信息, 会引导你创建一个package.json文件（项目配置文件），包括名称、版本、作者这些信息等 npm install [-g] [–save-dev]安装插件-g&nbsp;全局安装–save&nbsp;保存配置信息至package.json–save-dev&nbsp;保存配置信息至package.json的devDependencies节点 npm uninstall [-g] [–save-dev]删除插件, 不要直接删除本地插件包文件，要使用命令删除 npm update [-g] [–save-dev]更新插件,不指定时更新全部 npm list&nbsp;&nbsp;查看当前目录下安装的node包npm list -g&nbsp;&nbsp; 查看全局安装的node包 选装CNPM NPM安装插件是从国外服务器下载的，会存在下载速度慢甚至下载失败的问题，来自国内淘宝团队开发管理的CNPM能解决此问题，CNPM同步NPM的频率为10分钟一次，CNPM和NPM的语法完全一致,。 CNPM官方地址 安装CNPM npm install cnpm -g--registry=https://registry.npm.taobao.org 安装完成后查看版本号cnpm -v或关闭命令提示符重新打开，否则会报错]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由一个疑似弱鸡引发的联想]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%94%B1%E4%B8%80%E4%B8%AA%E7%96%91%E4%BC%BC%E5%BC%B1%E9%B8%A1%E5%BC%95%E5%8F%91%E7%9A%84%E8%81%94%E6%83%B3%2F</url>
    <content type="text"><![CDATA[我为什么会碰到一个疑似弱鸡，这似乎又是一个漫长的故事。想必人生来就是需要爱和自由的吧，从某一天起，你甘愿多一些奔波和劳累，让一些人变得越来越离不开；正好进入了白昼变长的时期，身体不再留恋多余的睡眠；正好进入了项目阶段性结业的时期，没有工作的时间只想奔向一个舒适的怀抱。 在这条奔向爱和自由的旅途中，我遇见了一个疑似弱鸡：那是一种在人群中会被无视的长相，扎进骨子里的自卑和盲目的自信。而他靠近的小姑娘，同样文静怯弱。我只是在思考：若我能有一大片空隙的空间看到他那么一个具有侵犯性的姿势，他怎么会失去一小点的脑容量去思考侧过身体避免一些生理反应。我就那样看着看着，也许是身边的空隙已经大到他再不移动已经说不过去了，也许他感受到了来自Danica的凝视，我无暇多想，小姑娘下车了，我看到她绯红的脸颊和一丝带着恨意的眼神。 地铁持续前行，疑似弱鸡也到站下车，眼角边似乎清净了，这个小插曲也被湮没在了拥挤的人流中，就像不曾发生过。 思绪泛滥，想到刚毕业的时候我去了北京，见过更拥挤的人流，经历过不疑似而肯定的弱鸡们，望着脚上的铆钉鞋，若是再遇见他们，我的铆钉们绝对会毫不犹豫的定位他们的裆部，用我这些年吸收的脏话大全，唾沫横飞的飚向他们的猥琐面孔，顺带两大耳刮子…然而我当时最厉害的不过也是一句对他母亲的问候，更多的时候憋屈的说不出话，泪水往肚子里吞。 生活已经把我变成了随身携带小刀片的女战士啦，看着车窗里倒映的自己的大脸盘子，笑了笑，这些个弱鸡们，真不是个东西，呸！]]></content>
      <categories>
        <category>life协奏曲</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Git生成并配置SSH密钥]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E7%94%9F%E6%88%90%E5%B9%B6%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5%2F</url>
    <content type="text"><![CDATA[前提安装git到本地，能在cmd中使用git命令行 步骤1.设置全局用户名和邮箱git config –global user.name “kakadanica”git config –global user.email “kakadanica.gmail.com”2.生成SSH密钥ssh-keygen -t rsa -C “kakadnaica@gmail.com”如果你之前有生成过，控制台会提示你already exist，并给你打印出密钥的地址，建议删除后重新生成。如果你之前未生成过，直接敲三个回车，密码为空，将会提示你生成成功并显示例如：Your identification has been saved in /c/Users/E450/.ssh/id_rsa.Your public key has been saved in /c/Users/E450/.ssh/id_rsa.pub.The key fingerprint is:3.添加密钥到github上找到id_rsa.pub文件，使用记事本打开，复制内容。登录GitHub，到https://github.com/settings/keys该页面中，新建new SSH Key。输入任意Title，将刚刚复制的内容粘贴到key中，保存提交。 结果在cmd中执行ssh git@github.com命令操作Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,192.30.255.112’ (RSA) to the list of known hosts.PTY allocation request failed on channel 0Hi kakadanica! You’ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.如上，表示设置成功！]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在cmd中执行git命令行操作]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E5%9C%A8cmd%E4%B8%AD%E6%89%A7%E8%A1%8Cgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[此情况发生场景安装git时未勾选Windows Explorer integration,在需要操作git命令行时，找不到操作面板 解决方案：配置环境变量1) 新建系统变量 GIT_HOME:[git安装地址（例如：D:\Program Files\Git)]2) 编辑Path,新建“%GIT_HOME%\usr\bin”和“%GIT_HOME%\bin” 结果打开cmd,任意使用git命令进行需要的操作]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>