<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringCloud客户端项目构建(使用Freemarker)]]></title>
    <url>%2F2017%2F10%2F17%2FSpringCloud%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA(%E4%BD%BF%E7%94%A8Freemarker)%2F</url>
    <content type="text"><![CDATA[背景作为一个具备java基础的前端工程师，了解到Spring boot是下一代的web框架，而Spring Cloud则是最新最火的微服务的翘楚，有必要在此记录他的项目构建方案，本文适用于前端开发小组的项目搭建，该项目的特性是不作为服务端发布，作为客户端发布，主要基于Spring Cloud，围绕Freemarker技术进行相关的配置，使用讲解。 前提请务必确保你的机器上安装了Eclipse Java EE IDE for Web Develipers.我的版本是Mars.2 Release(4.5.2),这将是特别重要的关键的一步， Eclipse在手，天下我有。 请务必一定程度的了解Spring Cloud模式和概念。 请务必一定程度的了解Freemarker功能使用方法。 步骤 下载 在Help-Eclipse MarketPlace的搜素下载sts(Spring Tools(aka Spring IDE and Spring Tool Suite)), 安装等待，成功后重启Eclipse。 构建项目 此时已经成功的下载sts,在Java EE模式下的Project Ecplorer窗口中 第一步 右键new-Other-Spring-Spring Starter Project（创建基于MAVEN的SpringCloud项目） 作为前端小组开发的基于客户端的项目，构建的时候必须加载Eureka Discovery组件（服务注册，用于向Eureka Server注册，将客户端信息发送到Eureka Server），Feign组件（作为HTTP客户端调用远程HTTP服务），Ribbon组件（负载均衡）。 作为服务提供开发组的微服务项目，构建时在上面的基础上还需要加载Eureka Server组件（用于发布可调用的服务），Zuul组件（路由 ）等…具体根据项目实际需求决定。 加载的组件，可在新建项目的第二步搜索勾选组件，也可自行配置pom.xml文件，如下（客户端开发小组项目配置示例）： 12345678910111213141516 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;&lt;/dependency&gt;... &lt;/dependencies&gt; 客户端项目开发还需要使用Freemarker等其他基本库，则需要在pom.xml中添加配置，如下： 1234567891011121314151617181920212223242526272829303132333435363738394041 &lt;!-- Freemarker --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- Spring boot basic --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; &lt;!-- alibaba --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.1.15&lt;/version&gt;&lt;/dependency&gt;&lt;!-- java developers&apos; basic jar 1--&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.4&lt;/version&gt;&lt;/dependency&gt;&lt;!-- java developers&apos; basic jar 2--&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt; &lt;artifactId&gt;json-lib&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;/dependency&gt;&lt;!-- 企业封装工具包 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.emin&lt;/groupId&gt; &lt;artifactId&gt;base&lt;/artifactId&gt; &lt;version&gt;v1.8&lt;/version&gt;&lt;/dependency&gt; 项目创建成功之后，选中项目名右键Maven-Update Project-勾选项目-ok。 Tips ==a. 删除项目路径下的mvnw文件和mvnw.cmd文件== ==b. Maven配置找不到包，需要配置Maven的settings== 配置User Settings的文件，文件内容如下： 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;localRepository&gt;E:/repo&lt;/localRepository&gt; &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; &lt;offline&gt;false&lt;/offline&gt; &lt;pluginGroups&gt;&lt;/pluginGroups&gt; &lt;proxies&gt;&lt;/proxies&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;dz-publish&lt;/id&gt; &lt;username&gt;dz-publish&lt;/username&gt; &lt;password&gt;dzpublish&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;dz-server-mirror&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;dz inner maven nexus server&lt;/name&gt; &lt;url&gt;http://192.168.0.250:10004/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt;&lt;/profiles&gt;&lt;/settings&gt; 您需要关心localRepository节点，mirrors-mirror-url节点的配置。 localRepository节点配置Maven将jar包加载在本地的那个磁盘路径里； url节点配置Maven从何处去下载jar包； 配置信息根据企业实际项目情况约定。 修改生成你的配置文件，放置在本地的指定目录下； Eclipse状态栏-Windows-Preferences-Maven-User Settings，找到你的配置文件详细路径配置在User Settings的文本框中-Apply-ok。 第二步 项目配置（客户端项目的应用配置） 项目创建成功后，你会发现该项目自动生成了一些文件，没用的我已经在上面建议你删除掉了，现在先介绍我们没有删掉的有用的文件。 ==目录1 src/main/java== 该目录下的生成了一个XXXAppication.java的文件，这个文件用于项目启动。 启动方式 ：选中该文件，右键Run As-Spring Boot App（建议在完成了第三步 目录资源整理后再尝试） ==目录2 sec/main/resources== 该目录下生成了一个application.properties的文件，这个文件用于项目配置。 配置方式: 首先，为了配置信息使用树状结构展示更加清晰了然，建议您将properties后缀改成yml后缀。 然后 配置项目合作的微服务中心地址12345eureka: client: serviceUrl: defaultZone: http://192.168.0.223:8761/eureka/ 配置项目的端口号123server: port: 8765 配置项目名称，Freemarker信息123456789101112131415161718spring: application: name: wxbase freemarker: allow-request-override: false cache: true checkTemplateLocation: true charSet: UTF-8 contentType: text/html exposeRequestAttributes: true exposeSessionAttributes: true exposeSpringMacroHelpers: false suffix: .html templateLoaderPath: classpath:/ prefer-file-system-access: false settings: templateExceptionHandler: ignor ==Freemarker配置说明：== templateLoaderPath对应的值（classpath:/）表示的是根目录，它用于后台服务返回页面的路径使用，在此有一个稍微的概念，后面具体使用了解。 suffix对应的值（.html）表示的是页面模板的后缀，有的项目使用ftl后缀，后台服务返回页面的时候就会找ftl后缀的页面，也可以理解为后台服务返回页面时自动加上了配置好的后缀。 至此，项目配置完成。 第三步 目录资源整理 ==重点1== 我强烈的建议你将前端的css、js、图片等文件作为静态资源放置在src/main/resources下新建文件夹static目录下。 然后在XXXXApplication.java文件的同级目录下，新建我们此处命名为WebMvcConfig.java文件，它将是我们手动的编写一个拦截器，目的是在项目启动的时候，将静态资源的访问路径注册到根目录下(你也可以有其它的目的，根据你的项目实际情况来)，内容如下： WebMvcConfig.java123456789101112131415161718192021222324package com.emin.platform.wxbase; import org.springframework.beans.factory.annotation.Configurable;import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; @Configurable @EnableWebMvc public class WebMvcConfig extends WebMvcConfigurerAdapter&#123; @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123; configurer.favorPathExtension(false); &#125; @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler(&quot;/js/**&quot;) .addResourceLocations(&quot;classpath:/static/js/&quot;); registry.addResourceHandler(&quot;/css/**&quot;) .addResourceLocations(&quot;classpath:/static/css/&quot;); registry.addResourceHandler(&quot;/img/**&quot;) .addResourceLocations(&quot;classpath:/static/img/&quot;); &#125; &#125; 完成了这个文件的编写，我们可以在前端的页面上通过/js、/css、/img去访问我们的静态资源，不会暴露它具体在哪个路径下。 @Configurable、@EnableWebMvc这两个注解会确保该文件在项目启动的时候被执行。 ==重点2== 我们要在src/main下面新建webapp的文件夹，点击webapp文件夹，右键-Build Path-Use as Source Folder。 webapp文件夹下将会放置我们的项目开发的模块或者页面代码。 至于Use as Source Folder这个操作可以让我们后台通过’classpath:/‘直接访问webapp下面的文件，意思是： 用户发送请求到后台服务，后台服务经过一系列的数据处理，通过访问页面路径的形式将处理结果信息返回到页面上，’classpath:/‘将会是webapp这个文件夹的路径。 而上文中我们在application.yml中配置了templateLoaderPath的值为’classpath:/‘,那么此时webapp文件夹的访问路径就等于该项目的根’/‘。 举例说明： 在src/main/weapp目录下新建index.html, 内容如下： index.html123456789101112 &lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;&lt;title&gt;主页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt; 在XXXXApplication.java的同级目录下新建controller包，在该包下new一个IndexController.java文件。内容如下： IndexController.java123456789101112131415161718192021222324package com.emin.platform.wxbase.controller;import java.io.UnsupportedEncodingException;import javax.servlet.http.HttpServletRequest;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.servlet.ModelAndView;@RestControllerpublic class IndexController&#123; @ResponseBody @RequestMapping(value = &quot;/&quot;,method = RequestMethod.GET) public ModelAndView index(HttpServletRequest request) throws UnsupportedEncodingException&#123; ModelAndView mv = new ModelAndView(&quot;index&quot;); return mv; &#125;&#125; 该Controller将项目的根目录访问指向了index.html页面，’.html’的后缀是项目配置里配置好了的，能找到webapp下的index.html页面,也是因为我们将webapp文件夹配置为Use as Source Folder。 微服务合作开发 Freemarker在项目中的使用]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cloud项目构建']]></title>
    <url>%2F2017%2F10%2F17%2FCloud%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[在Sublime Text中使用代码规范检查工具]]></title>
    <url>%2F2017%2F07%2F12%2F%E5%9C%A8Sublime-Text%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[背景无规矩不成方圆，业内已存在合理和规范的前端开发标准，合理的使用检查工具能够节约时间成本，同时养成优秀的代码习惯。本文所述的配置基于Sublime Text编辑器，基于Code Guide前端开发规范文档; 本文目前只涉及js代码规范检查，核心内容是Eslint工具的使用以及结合Sublime Text的配置。 准备工作 去百度搜索完成Sublime Text 3的安装和配置 安装和学习使用nodejs，参考Nodejs的安装和配置（Windows）) 核心内容 Eslint简介 Eslint由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。 ESLint 主要有以下特点： 默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移； 规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用； 包含代码风格检测的规则（可以丢掉 JSCS 了）； 支持插件扩展、自定义规则。 安装Eslint 使用nodejs的npm工具全局安装，语法如下： npm install eslint -g 配置Eslint代码风格 在项目或工程的的根目录新建.eslintrc.js文件，基于Code Guide前端开发规范文档JAVASCRIPT部分的规范, 文件内容建议如如下： module.exports = { &quot;env&quot;: { &quot;browser&quot;: true }, &quot;extends&quot;: &quot;eslint:recommended&quot;, &quot;rules&quot;: { &quot;camelcase&quot;: 2, // 强制驼峰法命名 &quot;id-match&quot;: 2, // 禁止重复定义 &quot;indent&quot;: [2,&quot;tab&quot;], // 缩进采取Tab &quot;semi&quot;: [2, &quot;always&quot;], // 语句强制分号结尾 &quot;quotes&quot;: [2,&quot;single&quot;], // 引号类型 单引号 &quot;no-dupe-args&quot;: 2,// 函数参数不能重复 &quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{} &quot;one-var&quot;:2, // 语句块不允许出现连续两个var &quot;vars-on-top&quot;: 2, // 定义的变量必须在作用域的顶部 &quot;newline-after-var&quot;: 2, // 定义完变量必须换一行 &quot;space-before-blocks&quot;: [2, &quot;always&quot;],//不以新行开始的块{前面要不要有空格 &quot;space-before-function-paren&quot;: [2, &quot;never&quot;],//函数定义时括号前面要不要有空格 &quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格 &quot;space-in-parens&quot;: [2, &quot;never&quot;],//小括号里面要不要有空格 &quot;space-infix-ops&quot;: 2,//中缀操作符周围要不要有空格 &quot;space-unary-ops&quot;: [2, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格 &quot;spaced-comment&quot;: 2,//注释风格要不要有空格什么的 &quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行 &quot;operator-linebreak&quot;: [2, &quot;after&quot;],// 换行时运算符在行尾还是行首 &quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; &quot;no-unreachable&quot;: 2,// 不能有无法执行的代码 &quot;default-case&quot;: 2,//switch语句最后必须有default &quot;no-sequences&quot;: 0,//禁止使用逗号运算符 &quot;no-empty&quot;: 2,// 块语句中的内容不能为空 &quot;no-eq-null&quot;: 2, // 禁止对null使用==或!=运算符 &quot;eqeqeq&quot;: 2,//必须使用全等 &quot;use-isnan&quot;: 2,// 禁止比较时使用NaN，只能用isNaN() &quot;no-underscore-dangle&quot;: 2, //标识符不能以下划线开头 &quot;no-undef&quot;: 2, // 不能有未定义的变量 &quot;no-use-before-define&quot;: 2,// 未定义前不能使用 &quot;no-unused-vars&quot;: [1, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],// 不能有声明后未被使用的变量或参数 &quot;no-alert&quot;: 1, // 警告弹窗 &quot;no-console&quot;: 1, // 警告控制台输出 &quot;no-debugger&quot;: 1, // 警告debugger &quot;no-trailing-spaces&quot;: 1, //一行结束后不能有空格 &quot;eol-last&quot;: 0, //文件以单一的换行符结尾 &quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行 } }; 检查代码规范 在项目或工程的根目录打开CMD，使用如下语法检查指定文件 eslint --fix [file.js][dir] 例如 eslint --fix js\leave_timepicker.js 此操作会通过控制台输出检查出来的错误信息，错误信息包含行数以及错误的原因，但是不够智能，我们要达到在日常代码编辑的过程中达到提示和修复的功能，就需要将Eslint集成到Sublime Text编辑器啦 集成Sublime Text 在 Sublime Text 中你需要安装两个插件： 安装 SublimeLinter调出package control搜索SublimeLinter进行安装 安装 SublimeLinter-contrib-eslint调出package control搜索eslint安装即可，全名：SublimeLinter-contrib-eslint。注意：该插件只支持Sublime text 3 关闭编辑器，再打开编辑器, 导入项目。打开任意js文件，右键-&gt;SublimeLinter-&gt;LintMode-&gt;点击Save Only, 设置为在文件进行保存操作后检查的模式。 以上，请享用Eslint带来的便利。]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs 的安装和配置(Windows)]]></title>
    <url>%2F2017%2F07%2F12%2FNodejs%20%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE(Windows)%2F</url>
    <content type="text"><![CDATA[简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm(node package manage)，是全球最大的开源库生态系统。 安装 下载nodejs下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js 直接点击【下一步】,记住安装路径(一般不安装在C盘，占内存),直至Node.js安装完成 打开cmd命令窗口，测试nodejs是否安装成功“node -v”, 测试npm是否安装成功“npm -v” 新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 安装完后的目录如下图所示： 环境配置说明: 这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install bower [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。 例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【nodeg_lobal】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入： npm config set prefix &quot;D:\Develop\nodejs\node\_global&quot; npm config set cache &quot;D:\Develop\nodejs\node\_cache&quot; 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”进入环境变量对话框在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 测试配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装： npm install express -g NPM常用语法 npm -v&nbsp;&nbsp;检查版本，常用于测试是否安装成功 npm init初始化项目信息, 会引导你创建一个package.json文件（项目配置文件），包括名称、版本、作者这些信息等 npm install [-g] [–save-dev]安装插件-g&nbsp;全局安装–save&nbsp;保存配置信息至package.json–save-dev&nbsp;保存配置信息至package.json的devDependencies节点 npm uninstall [-g] [–save-dev]删除插件, 不要直接删除本地插件包文件，要使用命令删除 npm update [-g] [–save-dev]更新插件,不指定时更新全部 npm list&nbsp;&nbsp;查看当前目录下安装的node包npm list -g&nbsp;&nbsp; 查看全局安装的node包 选装CNPM NPM安装插件是从国外服务器下载的，会存在下载速度慢甚至下载失败的问题，来自国内淘宝团队开发管理的CNPM能解决此问题，CNPM同步NPM的频率为10分钟一次，CNPM和NPM的语法完全一致,。 CNPM官方地址 安装CNPM npm install cnpm -g--registry=https://registry.npm.taobao.org 安装完成后查看版本号cnpm -v或关闭命令提示符重新打开，否则会报错]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由一个疑似弱鸡引发的联想]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%94%B1%E4%B8%80%E4%B8%AA%E7%96%91%E4%BC%BC%E5%BC%B1%E9%B8%A1%E5%BC%95%E5%8F%91%E7%9A%84%E8%81%94%E6%83%B3%2F</url>
    <content type="text"><![CDATA[我为什么会碰到一个疑似弱鸡，这似乎又是一个漫长的故事。想必人生来就是需要爱和自由的吧，从某一天起，你甘愿多一些奔波和劳累，让一些人变得越来越离不开；正好进入了白昼变长的时期，身体不再留恋多余的睡眠；正好进入了项目阶段性结业的时期，没有工作的时间只想奔向一个舒适的怀抱。 在这条奔向爱和自由的旅途中，我遇见了一个疑似弱鸡：那是一种在人群中会被无视的长相，扎进骨子里的自卑和盲目的自信。而他靠近的小姑娘，同样文静怯弱。我只是在思考：若我能有一大片空隙的空间看到他那么一个具有侵犯性的姿势，他怎么会失去一小点的脑容量去思考侧过身体避免一些生理反应。我就那样看着看着，也许是身边的空隙已经大到他再不移动已经说不过去了，也许他感受到了来自Danica的凝视，我无暇多想，小姑娘下车了，我看到她绯红的脸颊和一丝带着恨意的眼神。 地铁持续前行，疑似弱鸡也到站下车，眼角边似乎清净了，这个小插曲也被湮没在了拥挤的人流中，就像不曾发生过。 思绪泛滥，想到刚毕业的时候我去了北京，见过更拥挤的人流，经历过不疑似而肯定的弱鸡们，望着脚上的铆钉鞋，若是再遇见他们，我的铆钉们绝对会毫不犹豫的定位他们的裆部，用我这些年吸收的脏话大全，唾沫横飞的飚向他们的猥琐面孔，顺带两大耳刮子…然而我当时最厉害的不过也是一句对他母亲的问候，更多的时候憋屈的说不出话，泪水往肚子里吞。 生活已经把我变成了随身携带小刀片的女战士啦，看着车窗里倒映的自己的大脸盘子，笑了笑，这些个弱鸡们，真不是个东西，呸！]]></content>
      <categories>
        <category>life协奏曲</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Git生成并配置SSH密钥]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E7%94%9F%E6%88%90%E5%B9%B6%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5%2F</url>
    <content type="text"><![CDATA[前提安装git到本地，能在cmd中使用git命令行 步骤1.设置全局用户名和邮箱git config –global user.name “kakadanica”git config –global user.email “kakadanica.gmail.com”2.生成SSH密钥ssh-keygen -t rsa -C “kakadnaica@gmail.com”如果你之前有生成过，控制台会提示你already exist，并给你打印出密钥的地址，建议删除后重新生成。如果你之前未生成过，直接敲三个回车，密码为空，将会提示你生成成功并显示例如：Your identification has been saved in /c/Users/E450/.ssh/id_rsa.Your public key has been saved in /c/Users/E450/.ssh/id_rsa.pub.The key fingerprint is:3.添加密钥到github上找到id_rsa.pub文件，使用记事本打开，复制内容。登录GitHub，到https://github.com/settings/keys该页面中，新建new SSH Key。输入任意Title，将刚刚复制的内容粘贴到key中，保存提交。 结果在cmd中执行ssh git@github.com命令操作Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,192.30.255.112’ (RSA) to the list of known hosts.PTY allocation request failed on channel 0Hi kakadanica! You’ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.如上，表示设置成功！]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在cmd中执行git命令行操作]]></title>
    <url>%2F2017%2F06%2F01%2F%E5%A6%82%E4%BD%95%E5%9C%A8cmd%E4%B8%AD%E6%89%A7%E8%A1%8Cgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[此情况发生场景安装git时未勾选Windows Explorer integration,在需要操作git命令行时，找不到操作面板 解决方案：配置环境变量1) 新建系统变量 GIT_HOME:[git安装地址（例如：D:\Program Files\Git)]2) 编辑Path,新建“%GIT_HOME%\usr\bin”和“%GIT_HOME%\bin” 结果打开cmd,任意使用git命令进行需要的操作]]></content>
      <categories>
        <category>软件知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>